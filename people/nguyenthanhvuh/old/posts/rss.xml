<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[ThanhVu's website]]></title>
<description><![CDATA[ThanhVu's website]]></description>
<link>./</link>
<lastBuildDate>Wed, 14 Jun 2023 15:40:18 -0400</lastBuildDate>
<item>
  <title><![CDATA[A test]]></title>
  <description><![CDATA[
<table>


<colgroup>
<col  class="org-right">

<col  class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">A</th>
<th scope="col" class="org-right">B</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">1</td>
<td class="org-right">2</td>
</tr>
</tbody>
</table>
<div class="taglist"></div>]]></description>
  <link>./test.html</link>
  <guid>./test.html</guid>
  <pubDate>Sat, 29 Apr 2023 20:00:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Demystifying the Computer Science PhD Admission in US universities (Guide for Vietnamese and International Students)]]></title>
  <description><![CDATA[
<p>
See <a href="https://github.com/nguyenthanhvuh/phd-cs-us">https://github.com/nguyenthanhvuh/phd-cs-us</a>
</p>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-advice.html">advice</a> <a href="./tag-phd.html">phd</a> <a href="./tag-cs.html">cs</a> <a href="./tag-us.html">us</a> <a href="./tag-vietnamese.html">vietnamese</a> <a href="./tag-international.html">international</a> </div>]]></description>
  <category><![CDATA[advice]]></category>
  <category><![CDATA[phd]]></category>
  <category><![CDATA[cs]]></category>
  <category><![CDATA[us]]></category>
  <category><![CDATA[vietnamese]]></category>
  <category><![CDATA[international]]></category>
  <link>./phd-cs-us.html</link>
  <guid>./phd-cs-us.html</guid>
  <pubDate>Sat, 29 Apr 2023 20:00:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[My FreeBSD Setup]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf418f95">1. Timeline</a></li>
<li><a href="#org63375dc">2. Machine Specs</a></li>
<li><a href="#org1cc873d">3. Installation</a></li>
<li><a href="#org1d97928">4. Using</a>
<ul>
<li><a href="#orgcac4397">4.1. Installing Things</a></li>
<li><a href="#orgf368094">4.2. KDE</a></li>
</ul>
</li>
<li><a href="#org259edb1">5. Other stuff</a>
<ul>
<li><a href="#org5dfe5a7">5.1. Things that don't work</a></li>
<li><a href="#orgbdc5f70">5.2. My .dot files</a></li>
</ul>
</li>
<li><a href="#orgaf54885">6. Thoughts</a></li>
</ul>
</div>
</nav>

<figure id="orgb7d35a7">
<img src="../files/freebsd-vl.jpg" alt="freebsd-vl.jpg" width="50%" height="50%">

</figure>

<p>
My home machine, which was running Debian and was built in 2007, was becoming old and loud. So, I decided to set up a new home system on a small <b>Dell Optiplex</b> that I obtained from school. I decided to install FreeBSD on it instead of my preferred Debian Linux (because &#x2026; why not? my <a href="https://dynaroars.github.io/">lab</a> already has two servers running Debian).
</p>


<p>
This is the first time that I seriously use FreeBSD (I tried it before for a couple of weeks and went back to Linux). Below is my experience.
</p>

<div id="outline-container-orgf418f95" class="outline-2">
<h2 id="orgf418f95"><span class="section-number-2">1.</span> Timeline</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2023-01-21 Sat&gt; </span></span> &#x2013; <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-02-18 Sat&gt; </span></span> <code>Thunderbird</code> was updated to a version that doesn't supported OAuth and it was almost a month later that it finally got the new update to fix the issue. Really annoying.
</p></li>
</ul>

<figure id="org38c9d57">
<img src="../files/freebsd-capital.png" alt="freebsd-capital.png" width="50%" height="50%">

</figure>
<ul class="org-ul">
<li><span class="timestamp-wrapper"><span class="timestamp">&lt;2022-10-07 Fri&gt; </span></span> Things are going strong. Using the machine everyday when I am at home.</li>
<li><span class="timestamp-wrapper"><span class="timestamp">&lt;2022-09-14 Wed&gt; </span></span> Add a Dell Ultrasharp 43" monitor</li>
<li><span class="timestamp-wrapper"><span class="timestamp">&lt;2022-09-08 Thu&gt; </span></span> Got the <a href="https://nostarch.com/absfreebsd3">Asolute FreeBSD</a> book &#x2013; it has ben a while since I bought a computer book</li>
<li><span class="timestamp-wrapper"><span class="timestamp">&lt;2022-09-05 Mon&gt; </span></span> Setup FreeBSD on Dell Optiplex</li>
</ul>
</div>
</div>


<div id="outline-container-org63375dc" class="outline-2">
<h2 id="org63375dc"><span class="section-number-2">2.</span> Machine Specs</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">
<pre class="src src-txt">```                        `       tnguyen@ROARS 
  ` `.....---.......--.```   -/    ------------- 
  +o   .--`         /y:`      +.   OS: FreeBSD 13.1-RELEASE-p5 amd64 
   yo`:.            :o      `+-    Uptime: 24 days, 1 hour, 6 mins 
    y/               -/`   -o/     Packages: 1443 (pkg) 
   .-                  ::/sy+:.    Shell: fish 3.6.0 
   /                     `--  /    Resolution: 3840x2160 
  `:                          :`   DE: Plasma 5.26.5 
  `:                          :`   WM: KWin 
   /                          /    Theme: [Plasma], Emacs [GTK2/3] 
   .-                        -.    Icons: [Plasma], breeze [GTK2/3] 
    --                      -.     Terminal: tmux 
     `:`                  `:`      CPU: Intel i7-7700 (8) @ 3.600GHz 
       .--             `--.        GPU: HD Graphics 630 
          .---.....----.           Memory: 20354MiB / 32434MiB 
</pre>
</div>
</div>
</div>

<div id="outline-container-org1cc873d" class="outline-2">
<h2 id="org1cc873d"><span class="section-number-2">3.</span> Installation</h2>
<div class="outline-text-2" id="text-3">
<p>
Installation was straight-forward by downloading and installing <a href="https://download.freebsd.org/releases/amd64/amd64/ISO-IMAGES/13.1/">the ISO</a>. 
Then for installation I pretty much just accepted all default options. I believe I unchecked all server capabilities during installation because this will be used mainly as a desktop, and not a server.
</p>

<p>
FreeBSD doesn't seem to give me an option to install software (e.g., X, desktop environment, ..). That is fine, I can install them later.
</p>

<p>
Installation was so quick that I couldn't see what was being installed.
</p>
</div>
</div>

<div id="outline-container-org1d97928" class="outline-2">
<h2 id="org1d97928"><span class="section-number-2">4.</span> Using</h2>
<div class="outline-text-2" id="text-4">
<p>
After the first boot I then logged in as root to update the system, install <code>X</code>, <code>KDE</code>, <code>emacs</code>, and various things. But I didn't really know to do any of these. So I openned my iPad and go to read FreeBSD manual.
</p>
</div>

<div id="outline-container-orgcac4397" class="outline-3">
<h3 id="orgcac4397"><span class="section-number-3">4.1.</span> Installing Things</h3>
<div class="outline-text-3" id="text-4-1">
<p>
From the manual, I've learned various new commands for upgrading and installing software and so
</p>
<pre class="example">
# updating the system
freebsd-upgrade fetch
freebsd-upgrade install

# updating package
pkg upgrade
</pre>

<p>
Next is installing and using X, which I encountered some problems.  This is mainly because of me, as I didn't even know what graphic card this computer has other than some integrated one (likely Intel).
</p>

<pre class="example">
# installing X was easy
pkg install xorg
</pre>

<p>
Installing X is easy, then I tried <code>startx</code> and it failed immediately, which is not surprising because I haven't configured any graphic driver. I then tried the Linux way which is editing <code>xorg.conf</code> file, and I found the FreeBSD manual also has section about doing this. So I spent half an hr doing this without much success (because the <a href="https://docs.freebsd.org/en/books/handbook/x11/">manual</a> says use "intel" as Driver). It was pretty late and I was so sleepy to debug and so went to bed.
</p>

<p>
On the next day, I quickly googled for FreeBSD, X, Intel and fond out that the correct dirver is <code>i915kms</code> (not <code>intel</code>). Moreover, I shouldn't even have to edit <code>xorg.con</code> or any file, everything should be automatically detected and loaded.  Anyway, don't remember all the details but I think I did something like below
</p>

<pre class="example">
pkg install drm-kmod


# /etc/rc.conf
kld_list="i915kms"
dbus_enable="YES"  # for KDE
</pre>


<p>
Now <code>startx</code> works and so I don't need use <code>root</code> and so added the username I created to the <code>video</code> group and log in using that username (I also found out that I cannot <code>su</code> to root and then had to also add my username to <code>wheel</code>).
</p>
</div>
</div>

<div id="outline-container-orgf368094" class="outline-3">
<h3 id="orgf368094"><span class="section-number-3">4.2.</span> KDE</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Anyway, I then installed KDE, created a simple  <code>~/.xinitrc</code> file
</p>
<pre class="example">
exec ck-launch-session startplasma-x11
</pre>

<p>
and <code>startx</code> to start KDE.
</p>

<ul class="org-ul">
<li>Why KDE? In the past I typically used either <a href="https://www.windowmaker.org/">WindowMaker</a> or <a href="https://www.trinitydesktop.org/">Trinity</a> desktop. I wanted to try something new. I probably will switch back to WindowMaker soon, but so far I like that the new KDE because it allows me to perform  natural (invert) mouse scrolling in Firefox (when I was in Linux I was never able to get Firefox to do this kind of scrolling with Trinity or WindowMaker).</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org259edb1" class="outline-2">
<h2 id="org259edb1"><span class="section-number-2">5.</span> Other stuff</h2>
<div class="outline-text-2" id="text-5">
<p>
I was able to install Firefox and Thunderbird and setup my mails. Pretty straightforward.
</p>
</div>

<div id="outline-container-org5dfe5a7" class="outline-3">
<h3 id="org5dfe5a7"><span class="section-number-3">5.1.</span> Things that don't work</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>Sometimes it won't automatically turn off my monitor. Never had this problem with the older, smaller monitor.</li>
<li>Can't get my Canon printer to work. It sees the printer (wireless) but Canon does not have the driver for this printer for BSD.</li>
<li>Slack is not available on FreeBSD, so I had to run it inside Firefox.</li>
<li><del>I can't get my monitor to output any sound. The monitor has a speaker. And KDE reports that sound driver working fine, but I can't hear any sound</del>.
<ul class="org-ul">
<li>got this to work, not sure how though.</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orgbdc5f70" class="outline-3">
<h3 id="orgbdc5f70"><span class="section-number-3">5.2.</span> My .dot files</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li><code>/boot/loader.conf</code></li>
</ul>
<div class="org-src-container">
<pre class="src src-bash">kern.geom.label.disk_ident.enable=<span style="color: #98be65;">"0"</span>
kern.geom.label.gptid.enable=<span style="color: #98be65;">"0"</span>
<span style="color: #dcaeea;">cryptodev_load</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #dcaeea;">zfs_load</span>=<span style="color: #98be65;">"YES"</span>
kern.vty=vt
<span style="color: #5B6268;">#</span><span style="color: #5B6268;">snd_hda_load="YES"</span>
<span style="color: #dcaeea;">snd_driver_load</span>=<span style="color: #98be65;">"YES"</span>
</pre>
</div>

<ul class="org-ul">
<li><code>/etc/rc.conf</code></li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #dcaeea;">hostname</span>=<span style="color: #98be65;">"ROARS"</span>
<span style="color: #dcaeea;">ifconfig_em0</span>=<span style="color: #98be65;">"DHCP"</span>
<span style="color: #dcaeea;">ifconfig_em0_ipv6</span>=<span style="color: #98be65;">"inet6 accept_rtadv"</span>
<span style="color: #dcaeea;">sshd_enable</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable</span>
<span style="color: #dcaeea;">dumpdev</span>=<span style="color: #98be65;">"AUTO"</span>
<span style="color: #dcaeea;">zfs_enable</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #dcaeea;">kld_list</span>=<span style="color: #98be65;">"i915kms"</span>
<span style="color: #dcaeea;">dbus_enable</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #dcaeea;">ntpd_enable</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #dcaeea;">cupsd_enable</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #dcaeea;">devfs_system_ruleset</span>=<span style="color: #98be65;">"system"</span>
<span style="color: #dcaeea;">coretemp_load</span>=<span style="color: #98be65;">"YES"</span>
<span style="color: #dcaeea;">sendmail_enable</span>=<span style="color: #98be65;">"NONE"</span>
<span style="color: #dcaeea;">sddm_enable</span>=<span style="color: #98be65;">"yes"</span>
</pre>
</div>

<ul class="org-ul">
<li><code>~/.config/gtk-3.0/settings.ini</code></li>
</ul>
<div class="org-src-container">
<pre class="src src-txt">[Settings]
gtk-application-prefer-dark-theme=false
gtk-button-images=true
gtk-cursor-theme-name=breeze_cursors
gtk-cursor-theme-size=24
gtk-decoration-layout=icon:minimize,maximize,close
gtk-enable-animations=false
gtk-font-name=Hack,  10
gtk-icon-theme-name=breeze
gtk-key-theme-name=Emacs
gtk-menu-images=true
gtk-modules=colorreload-gtk-module:window-decorations-gtk-module
gtk-primary-button-warps-slider=false
gtk-theme-name=Emacs
gtk-toolbar-style=3
gtk-xft-dpi=98304
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgaf54885" class="outline-2">
<h2 id="orgaf54885"><span class="section-number-2">6.</span> Thoughts</h2>
<div class="outline-text-2" id="text-6">
<p>
I have been using FreeBSD for only three days, during which my son has already explored and played various KDE games on it. It doesn't feel much different from my old Debian desktop, though the new machine is very quiet when compared to my old computer. I was able to start working and being productive on it right away.
</p>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-computer.html">computer</a> <a href="./tag-setup.html">setup</a> <a href="./tag-blog.html">blog</a> <a href="./tag-bsd.html">bsd</a> </div>]]></description>
  <category><![CDATA[computer]]></category>
  <category><![CDATA[setup]]></category>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[bsd]]></category>
  <link>./freebsd.html</link>
  <guid>./freebsd.html</guid>
  <pubDate>Sun, 04 Sep 2022 20:00:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Badminton in Albuquerque, New Mexico]]></title>
  <description><![CDATA[
<p>
I am longer in NM but still got lots of emails from people asking about badminton information. So here are some information:
</p>

<ul class="org-ul">
<li>Johnson gym (UNM): people play badminton at Johnson gym very often. I don't know their exact schedule but usually it is on Friday evening (around 7) and Sunday afternoon (around 2).  There is no membership fee, but you need to pay or be a member to enter Johnson center.</li>

<li>Also, there is a group that plays at Manzano Mesa Multicultural Center every Tuesday and Thursday from 6 to 8 pm (not sure if they have changed this).</li>
</ul>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-blog.html">blog</a> <a href="./tag-miscs.html">miscs</a> </div>]]></description>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[miscs]]></category>
  <link>./badminton_new_mexico.html</link>
  <guid>./badminton_new_mexico.html</guid>
  <pubDate>Sun, 27 Feb 2022 19:00:00 -0500</pubDate>
</item>
<item>
  <title><![CDATA[LaTeX Letterhead ]]></title>
  <description><![CDATA[
<p>
A minimal letter head with logo
</p>

<p>
Need to write a letter of reference for a student and realize I don't have a professional looking letter template.  So I work a bit on a simple letter template in \(\LaTeX\) that has a GMU logo on top.  Here is the code and result: <a href="https://github.com/dynaroars/docs/gmu/letter/">https://github.com/dynaroars/docs/gmu/letter/</a>
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #51afef;">\documentclass</span>[11pt]{<span style="color: #c678dd;">letter</span>}
<span style="color: #51afef;">\usepackage</span>[top=1in,bottom=1in,left=1in,right=1in]{<span style="color: #c678dd;">geometry</span>}
<span style="color: #51afef;">\usepackage</span>{<span style="color: #c678dd;">graphicx</span>}
<span style="color: #51afef;">\usepackage</span>{<span style="color: #c678dd;">tcolorbox</span>}
<span style="color: #51afef;">\usepackage</span>{<span style="color: #c678dd;">lipsum</span>}
<span style="color: #51afef;">\usepackage</span>{<span style="color: #c678dd;">hyperref</span>}
<span style="color: #51afef;">\colorlet</span>{dkgreen}{green!20!black}  
<span style="color: #51afef;">\hypersetup</span>{
  colorlinks=true,
  allcolors=dkgreen
}

<span style="color: #51afef;">\address</span>{
  <span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">tcolorbox</span>}[colback=white,colframe=dkgreen,sharp corners=uphill]
    <span style="color: #51afef;">\vspace</span>{-0.6in}
    <span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">minipage</span>}[b]{0.52<span style="color: #51afef;">\textwidth</span>}
      <span style="color: #51afef;">\colorbox</span>{white}{<span style="color: #51afef;">\includegraphics</span>[height=1.0in]{<span style="color: #c678dd;">gmu.png</span>}}
    <span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">minipage</span>}
    <span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">minipage</span>}{0.50<span style="color: #51afef;">\textwidth</span>}
      <span style="color: #51afef;">\vspace</span>{0.4in}
      {<span style="color: #51afef;">\large</span> <span style="color: #51afef;">\bf</span><span style="font-weight: bold;"> </span><span style="color: #51afef; font-weight: bold;">\myname</span>}<span style="color: #ECBE7B;">\\</span>
      <span style="color: #51afef;">\emph</span>{<span style="color: #51afef; font-style: italic;">\mytitle</span>}<span style="color: #ECBE7B;">\\</span>
      <span style="color: #51afef;">\emph</span>{<span style="color: #51afef; font-style: italic;">\mydept</span>}<span style="color: #ECBE7B;">\\</span>
      <span style="color: #51afef;">\emph</span>{<span style="color: #51afef; font-style: italic;">\myschool</span>}<span style="color: #ECBE7B;">\\</span>
      <span style="color: #51afef;">\emph</span>{<span style="color: #51afef; font-style: italic;">\myaddress</span>}<span style="color: #ECBE7B;">\\</span>
      {<span style="color: #51afef;">\myemail</span>}; {<span style="color: #51afef;">\myweb</span>}
    <span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">minipage</span>}
  <span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">tcolorbox</span>}  
}

<span style="color: #51afef;">\signature</span>{<span style="color: #51afef;">\myname</span>}

<span style="color: #5B6268;">%%% </span><span style="color: #5B6268;">Customizations below</span>
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\myname</span>{ThanhVu Nguyen}
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\mytitle</span>{Assistant Professor}
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\mydept</span>{Department of Computer Science}
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\myschool</span>{George Mason University}
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\myaddress</span>{4400 University Drive, Fairfax, VA 22030}
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\myemail</span>{<span style="color: #51afef;">\href</span>{mailto:tvn@gmu.edu}{<span style="color: #51afef;">\texttt</span>{tvn@gmu.edu}}}
<span style="color: #51afef;">\newcommand</span><span style="color: #c678dd;">\myweb</span>{<span style="color: #51afef;">\href</span>{https://go.gmu.edu/tvn}{<span style="color: #51afef;">\texttt</span>{https://go.gmu.edu/tvn}}}


<span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">document</span>}
<span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">letter</span>}{}

  <span style="color: #51afef;">\date</span>{<span style="color: #51afef;">\textbf</span>{<span style="color: #51afef; font-weight: bold;">\today</span>}}
  <span style="color: #51afef;">\opening</span>{To whom it may concern:}

  <span style="color: #51afef;">\lipsum</span>[2-8]

  <span style="color: #51afef;">\closing</span>{Sincerely,}


  <span style="color: #51afef;">\ps</span>{<span style="color: #51afef;">\textbf</span>{<span style="font-weight: bold;">Qualification</span>}: Nguyen completed his Ph.D. in Computer Science at the University of New Mexico-Albuquerque and a postdoc at the University of Maryland-College Park. His research lies at the intersection of Software Engineering and Formal Methods, focusing on safety of AI and soundness and complexity of programs. He is the recipient of the NSF CAREER Award, the NSF CRII Award, an Amazon Research Award, an ACM SIGSOFT ICSE Most Influential Paper Award, an ACM SIGEVO Impact Award, the IFIP TC2 Manfred Paul Award for Excellence in Software: Theory and Practice, and the ACM SIGEVO <span style="color: #51afef;">``</span><span style="color: #98be65;">Humies</span><span style="color: #51afef;">''</span> Gold Medal Award.}
  <span style="color: #5B6268;">%\encl{} %Enclosures goes here</span>
<span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">letter</span>}
<span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">document</span>}
</pre>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-tex.html">TeX</a> <a href="./tag-letter.html">letter</a> </div>]]></description>
  <category><![CDATA[TeX]]></category>
  <category><![CDATA[letter]]></category>
  <link>./letter.html</link>
  <guid>./letter.html</guid>
  <pubDate>Thu, 26 Aug 2021 02:58:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[My Website and Blog Setup]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org149c70b">1. Auto Dark/Light Scheme Change</a></li>
<li><a href="#orgd921588">2. Using org-static-blog</a></li>
</ul>
</div>
</nav>
<p>
Minimal CSS that automatically switches btw light and dark, and blog setup using <code>org-static-blog</code>
</p>

<div id="outline-container-org149c70b" class="outline-2">
<h2 id="org149c70b"><span class="section-number-2">1.</span> Auto Dark/Light Scheme Change</h2>
<div class="outline-text-2" id="text-1">
<p>
My website automatically changes its color to dark and light setting depending on the user's OS preference. This useful custmization is quite simple with CSS using the <code>@media (prefers-color-scheme: dark) {...}</code> feature.  Below is a minimal CSS example that lists light (default) and dark color schemes and automatically changes to the preferred one set by your OS or Window Manger.
</p>

<div class="org-src-container">
<pre class="src src-css"><span style="color: #51afef;">body </span>{
    <span style="color: #98be65;">background</span>: <span style="color: #000000; background-color: #f6f6f6;">#f6f6f6</span>;
}

<span style="color: #c678dd;">@media</span> (prefers-color-scheme: dark) {
    <span style="color: #51afef;">body </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #000000; background-color: #d3d3d3;">lightgray</span>;
        <span style="color: #98be65;">background</span>: <span style="color: #ffffff; background-color: #454545;">#454545</span>;
    }
}

</pre>
</div>


<p>
Here's the actual <a href="https://dynaorars.github.io/files/org.css">CSS</a> file I use for my website.
</p>
<div class="org-src-container">
<pre class="src src-css"><span style="color: #51afef;">body </span>{
    <span style="color: #98be65;">margin</span>: 40px auto;
    <span style="color: #98be65;">max-width</span>: 90%;
    <span style="color: #98be65;">line-height</span>: 1.6;
    <span style="color: #98be65;">padding</span>: 0 10px
}

<span style="color: #51afef;">blockquote </span>{
  <span style="color: #98be65;">background</span>: <span style="color: #000000; background-color: #f9f9f9;">#f9f9f9</span>;
  <span style="color: #98be65;">border-left</span>: 10pt solid <span style="color: #000000; background-color: #ccc;">#ccc</span>;
  <span style="color: #98be65;">margin</span>: 1.5em 10pt; 
  <span style="color: #98be65;">padding</span>: 0.5em 10pt;
}


<span style="color: #51afef;">blockquote p </span>{
  <span style="color: #98be65;">display</span>: inline;
}

<span style="color: #51afef;">.styled </span>{
  <span style="color: #98be65;">list-style</span>: none;
  <span style="color: #98be65;">padding</span>: 0;
  <span style="color: #5B6268;">/* </span><span style="color: #5B6268;">margin: 0.1;</span><span style="color: #5B6268;"> */</span>
}

<span style="color: #51afef;">.styled li </span>{
  <span style="color: #98be65;">padding-left</span>: 1rem;
}

<span style="color: #51afef;">.styled li::before </span>{
  <span style="color: #98be65;">content</span>: attr(data-icon);
  <span style="color: #5B6268;">/* </span><span style="color: #5B6268;">Make slightly larger than the li font-size</span>
<span style="color: #5B6268;">  but smaller than the li grid-gap</span><span style="color: #5B6268;"> */</span>
}


<span style="color: #c678dd;">@media</span> (prefers-color-scheme: light) {
    <span style="color: #51afef;">body </span>{
        <span style="color: #98be65;">background</span>: <span style="color: #000000; background-color: #ffffff;">white</span>;
    }
    <span style="color: #51afef;">pre,code</span>{
        <span style="color: #98be65;">background</span>: <span style="color: #000000; background-color: #f8f8ff;">ghostwhite</span>;
    }
}

<span style="color: #c678dd;">@media</span> (prefers-color-scheme: dark) {    
    <span style="color: #5B6268;">/* </span><span style="color: #5B6268;">Solarized dark color</span><span style="color: #5B6268;"> */</span>
    <span style="color: #51afef;">body </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #ffffff; background-color: #839496;">#839496</span>;
        <span style="color: #98be65;">background</span>: <span style="color: #ffffff; background-color: #002b36;">#002b36</span>;

    }
    <span style="color: #51afef;">a </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #ffffff; background-color: #b58900;">#b58900</span>;
    }
    <span style="color: #51afef;">a:visited </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #ffffff; background-color: #cb4b16;">#cb4b16</span>;
    }    
    <span style="color: #51afef;">strong </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #000000; background-color: #a9a9a9;">darkgray</span>
    }
    <span style="color: #51afef;">h1 </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #ffffff; background-color: #d33682;">#d33682</span>;
    }
    <span style="color: #51afef;">h2,</span>
<span style="color: #51afef;">    h3,</span>
<span style="color: #51afef;">    h4,</span>
<span style="color: #51afef;">    h5,</span>
<span style="color: #51afef;">    h6 </span>{
        <span style="color: #98be65;">color</span>: <span style="color: #ffffff; background-color: #859900;">#859900</span>;
    }


    <span style="color: #51afef;">pre, code</span>{
        <span style="color: #98be65;">background</span>: <span style="color: #ffffff; background-color: #073642;">#073642</span>;
        <span style="color: #98be65;">border</span>: 1pt solid <span style="color: #ffffff; background-color: #586e75;">#586e75</span>;
        <span style="color: #98be65;">box-shadow</span>: 1pt 1pt 1pt <span style="color: #ffffff; background-color: #586e75;">#586e75</span>;
        <span style="color: #98be65;">padding</span>: 1pt;
    }


}
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd921588" class="outline-2">
<h2 id="orgd921588"><span class="section-number-2">2.</span> Using <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a></h2>
<div class="outline-text-2" id="text-2">
<p>
I use <code>Org Mode</code> in Emacs for my website and <code>org-static-blog</code> for <a href="./index.html">my blog</a>.
</p>

<ul class="org-ul">
<li>Below shows the setup for my blog, which has the following hierachy:
<ul class="org-ul">
<li><code>org/</code> :  store <code>.org</code> source files</li>
<li><code>posts/</code> : store output <code>.html</code> files</li>
<li><code>files/</code> : store miscellaneous files (e.g., pictures) used by my blog entries
<ul class="org-ul">
<li><p>
<code>header.html</code>
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #c678dd;">meta</span> <span style="color: #dcaeea;">name</span>=<span style="color: #98be65;">"author"</span> <span style="color: #dcaeea;">content</span>=<span style="color: #98be65;">"ThanhVu Nguyen"</span>&gt;
&lt;<span style="color: #c678dd;">meta</span> <span style="color: #dcaeea;">name</span>=<span style="color: #98be65;">"referrer"</span> <span style="color: #dcaeea;">content</span>=<span style="color: #98be65;">"no-referrer"</span>&gt;
&lt;<span style="color: #c678dd;">link</span> <span style="color: #dcaeea;">rel</span>=<span style="color: #98be65;">"stylesheet"</span> <span style="color: #dcaeea;">type</span>=<span style="color: #98be65;">"text/css"</span> <span style="color: #dcaeea;">href</span>=<span style="color: #98be65;">"https://dynaroars.github.io/files/org.css"</span> /&gt;
&lt;<span style="color: #c678dd;">link</span> href= <span style="color: #98be65;">"../files/org-orig.css"</span> <span style="color: #dcaeea;">rel</span>=<span style="color: #98be65;">"stylesheet"</span> <span style="color: #dcaeea;">type</span>=<span style="color: #98be65;">"text/css"</span> /&gt; 
&lt;<span style="color: #c678dd;">link</span> <span style="color: #dcaeea;">rel</span>=<span style="color: #98be65;">"icon"</span> <span style="color: #dcaeea;">href</span>=<span style="color: #98be65;">"../files/favicon.ico"</span>&gt;
&lt;<span style="color: #c678dd;">script</span> async <span style="color: #dcaeea;">src</span>=<span style="color: #98be65;">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-MML-AM_CHTML"</span>&gt;
&lt;/<span style="color: #c678dd;">script</span>&gt;
</pre>
</div></li>
<li><p>
<code>preamble.html</code>
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #c678dd;">div</span> <span style="color: #dcaeea;">class</span>=<span style="color: #98be65;">"header"</span>&gt;
  &lt;<span style="color: #c678dd;">a</span> <span style="color: #dcaeea;">href</span>=<span style="color: #98be65;">"../index.html"</span>&gt;ThanhVu Nguyen&lt;/<span style="color: #c678dd;">a</span>&gt;,  
  &lt;<span style="color: #c678dd;">a</span> <span style="color: #dcaeea;">href</span>=<span style="color: #98be65;">"index.html"</span>&gt;Archive&lt;/<span style="color: #c678dd;">a</span>&gt;
&lt;/<span style="color: #c678dd;">div</span>&gt;
</pre>
</div></li>
<li><p>
<code>postamble.html</code>
</p>
<div class="org-src-container">
<pre class="src src-html"><span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">&lt;div id="archive"&gt;&lt;a href="archive.html"&gt;Other posts&lt;/a&gt;&lt;/div&gt;</span><span style="color: #5B6268;">  --&gt;</span>
</pre>
</div></li>
</ul></li>
</ul></li>

<li><p>
<code>.emacs</code> setup
</p>
<div class="org-src-container">
<pre class="src src-lisp">(use-package org-static-blog
  <span style="color: #c678dd;">:ensure</span> t
  <span style="color: #c678dd;">:config</span>
  (setq
   org-static-blog-publish-title <span style="color: #98be65;">"ThanhVu's website"</span>
   org-static-blog-publish-url <span style="color: #98be65;">"./"</span>
   org-static-blog-publish-directory <span style="color: #98be65;">"/Users/tnguyen/git/www/nguyenthanhvuh/docs/posts/"</span>
   org-static-blog-posts-directory <span style="color: #98be65;">"/Users/tnguyen/git/www/nguyenthanhvuh/docs/org/"</span>
   org-static-blog-drafts-directory <span style="color: #98be65;">"/Users/tnguyen/git/www/nguyenthanhvuh/docs/drafts/"</span>
   org-static-blog-use-preview t
   org-static-blog-preview-convert-titles t
   org-static-blog-preview-ellipsis <span style="color: #98be65;">"..."</span>   
   org-static-blog-enable-tags t
   org-static-blog-index-length 10
   org-export-with-toc t
   org-export-with-section-numbers t

   org-static-blog-page-header (<span style="color: #51afef;">with-temp-buffer</span>
                                 (insert-file-contents
                                  <span style="color: #98be65;">"/Users/tnguyen/git/www/nguyenthanhvuh/docs/files/header.html"</span>)
                                 (buffer-string))

   org-static-blog-page-preamble (<span style="color: #51afef;">with-temp-buffer</span>
                                   (insert-file-contents
                                    <span style="color: #98be65;">"/Users/tnguyen/git/www/nguyenthanhvuh/docs/files/preamble.html"</span>)
                                   (buffer-string))

   org-static-blog-page-postamble (<span style="color: #51afef;">with-temp-buffer</span>
                                    (insert-file-contents
                                     <span style="color: #98be65;">"/Users/tnguyen/git/www/nguyenthanhvuh/docs/files/postamble.html"</span>)
                                    (buffer-string))

   org-static-blog-index-front-matter <span style="color: #98be65;">"&lt;h1&gt; ThanhVu's blog &lt;/h1&gt;\n"</span>)
  )

</pre>
</div></li>
</ul>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-computer.html">computer</a> <a href="./tag-setup.html">setup</a> <a href="./tag-blog.html">blog</a> </div>]]></description>
  <category><![CDATA[computer]]></category>
  <category><![CDATA[setup]]></category>
  <category><![CDATA[blog]]></category>
  <link>./mywebsite.html</link>
  <guid>./mywebsite.html</guid>
  <pubDate>Sat, 05 Jun 2021 03:39:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Creating and Checking Deep Neural Networks]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#examples">1. Goal</a></li>
<li><a href="#org55bc8a7">2. Encoding</a>
<ul>
<li><a href="#orgc775226">2.1. Another example</a></li>
</ul>
</li>
<li><a href="#orgef05e0a">3. Symbolic Execution</a></li>
</ul>
</div>
</nav>
<p>
A simple excercise for creating and checking Deep Neural Networks
</p>

<div id="outline-container-examples" class="outline-2">
<h2 id="examples"><span class="section-number-2">1.</span> Goal</h2>
<div class="outline-text-2" id="text-examples">
<p>
First, we manually create standard feedforward neural networks using popular framework such as Tensorflow and Torch.  Then, we will check and verify them.
</p>
</div>
</div>


<div id="outline-container-org55bc8a7" class="outline-2">
<h2 id="org55bc8a7"><span class="section-number-2">2.</span> Encoding</h2>
<div class="outline-text-2" id="text-2">
<p>
Consider the following DNN with 2 inputs, 2 hidden layers, and 2 outputs.
</p>


<figure id="org88c338b">
<img src="../files/dnn1.png" alt="dnn1.png" width="800px">

</figure>


<p>
In addition, for this DNN, the outputs of the neurons in the hidden layers (prefixed
with <code>n</code>) are applied with the <code>relu</code> activation function, but the
outputs of the DNN (prefixed with <code>o</code>) are not. These settings are
controlled by the <code>True</code>, <code>False</code> parameters as shown in the code below. Also, this
example does not use <code>bias</code>, i.e., bias values are all 0.0's as shown below.
Note that all of these settings are parameterized and I deliberately use
this example to show these how these parameters are used (e.g., <code>relu</code>
only applies to hidden neurons, but not outputs).
</p>

<ul class="org-ul">
<li><p>
Using Tensorflow:
</p>

<p>
We can encode this DNN using Tensorflow Keras:
</p>
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #51afef;">import</span> tensorflow <span style="color: #51afef;">as</span> tf
<span style="color: #51afef;">from</span> tensorflow <span style="color: #51afef;">import</span> keras
<span style="color: #51afef;">from</span> tensorflow.keras.models <span style="color: #51afef;">import</span> Sequential
<span style="color: #51afef;">from</span> tensorflow.keras.layers <span style="color: #51afef;">import</span> Dense
<span style="color: #51afef;">from</span> tensorflow.keras <span style="color: #51afef;">import</span> activations

<span style="color: #dcaeea;">model</span> = Sequential()

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">layer 0: nodes n00, n01</span>
model.add(Dense(units=2,
                input_shape=(2, ),    <span style="color: #5B6268;"># </span><span style="color: #5B6268;">2 inputs (i.e., i0, i1 in the Figure)</span>
                activation=activations.relu,  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">relu activation</span>
                kernel_initializer=tf.constant_initializer(
                    [[1.0, 1.0],  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">weights of n00</span>
                     [-1.0, 1.0]  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">weights of n01</span>
                     ]),
                bias_initializer=tf.constant_initializer(
                    [[0.0],  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">bias of n00</span>
                     [0.0]]  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">bias of n01</span>
                ), 
                dtype=<span style="color: #98be65;">'float64'</span>
                ))

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">layer 1: nodes n10, n11</span>
model.add(Dense(units=2,
                activation=activations.relu,
                kernel_initializer=tf.constant_initializer(
                    [[0.5, -0.5], [-0.2, 0.1]]),
                bias_initializer=tf.constant_initializer([[0.0], [0.0]]),
                dtype=<span style="color: #98be65;">'float64'</span>
                ))

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">last layer: nodes represent outputs o0, o1</span>
model.add(Dense(units=2,
                activation=<span style="color: #a9a1e1;">None</span>,  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">no activation function for output nodes</span>
                kernel_initializer=tf.constant_initializer(
                    [[1.0, -1.0], [-1.0, 1.0]]), <span style="color: #5B6268;"># </span><span style="color: #5B6268;">weights of o0, o1</span>
                bias_initializer=tf.constant_initializer([[0.0], [0.0]]),  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">bias of o0, o1</span>
                dtype=<span style="color: #98be65;">'float64'</span>
                ))
</pre>
</div></li>

<li>Using Torch</li>
</ul>
</div>

<div id="outline-container-orgc775226" class="outline-3">
<h3 id="orgc775226"><span class="section-number-3">2.1.</span> Another example</h3>
<div class="outline-text-3" id="text-2-1">

<figure id="org917af8d">
<img src="../files/dnn2.png" alt="dnn2.png" width="800px">   

</figure>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #dcaeea;">model</span> = Sequential()

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">n00, n01</span>
<span style="color: #dcaeea;">d0</span> = Dense(units=2,
           input_shape=(3, ),
           activation=activations.relu,
           kernel_initializer=tf.constant_initializer(
               [[1.0, 1.0], [-1.0, 1.0],  [1.0, -1.0]]),
           bias_initializer=tf.constant_initializer(
               [[0.0], [0.0]]),
           dtype=dtype)
model.add(d0)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">n10,n11,n12</span>
d1 = Dense(units=3,
           activation=activations.relu,
           kernel_initializer=tf.constant_initializer(
               [[0.5, -0.5, 0.3], [-0.2, 0.1, -0.3]]),
           bias_initializer=tf.constant_initializer([[0.0], [0.0], [0.0]]),
           dtype=dtype
           )
model.add(d1)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">n20, n21</span>
d2 = Dense(units=2,
           activation=activations.relu,
           kernel_initializer=tf.constant_initializer(
               [[0.1, -0.5], [0.2, 0.7], [1.2, -0.8]]),
           bias_initializer=tf.constant_initializer([[0.0], [0.0]]),
           dtype=dtype
           )
model.add(d2)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">o0, o1</span>
d3 = Dense(units=2,
           activation=<span style="color: #a9a1e1;">None</span>,
           kernel_initializer=tf.constant_initializer(
               [[1.0, -1.0], [-1.0, 1.0]]),
           bias_initializer=tf.constant_initializer([[0.0], [0.0]]),
           dtype=dtype
           )
model.add(d3)
</pre>
</div>
</div>
</div>
</div>



<div id="outline-container-orgef05e0a" class="outline-2">
<h2 id="orgef05e0a"><span class="section-number-2">3.</span> Symbolic Execution</h2>
<div class="outline-text-2" id="text-3">
<p>
After performing symbolic execution on <code>dnn</code>, we obtain
<code>symbolic states</code>, represented by a logical formula relating inputs and
outputs.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">my_symbolic_execution is something you implement,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">it returns a single (but large) formula representing the symbolic states.</span>
<span style="color: #dcaeea;">symbolic_states</span> = my_symbolic_execution(dnn)
...
<span style="color: #98be65;">"done, obtained symbolic states for DNN with 2 inputs, 4 hidden neurons, and 2 outputs in 0.1s"</span>
<span style="color: #51afef;">assert</span> z3.is_expr(symbolic_states)  <span style="color: #5B6268;">#</span><span style="color: #5B6268;">symbolic_states is a Z3 formula/expression</span>

<span style="color: #c678dd;">print</span>(symbolic_states)
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">And(n0_0 == If(i0 + -1*i1 &lt;= 0, 0, i0 + -1*i1),</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">n0_1 == If(i0 + i1 &lt;= 0, 0, i0 + i1),</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">n1_0 ==</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">If(1/2*n0_0 + -1/5*n0_1 &lt;= 0, 0, 1/2*n0_0 + -1/5*n0_1),</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">n1_1 ==</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">If(-1/2*n0_0 + 1/10*n0_1 &lt;= 0, 0, -1/2*n0_0 + 1/10*n0_1),</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">o0 == n1_0 + -1*n1_1,</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">o1 == -1*n1_0 + n1_1)</span>
</pre>
</div>

<p>
We can use a constraint solver such as Z3 to query various things about
this DNN from the obtained symbolic states:
</p>

<ol class="org-ol">
<li><p>
Generating random inputs and obtain outputs
</p>

<div class="org-src-container">
<pre class="src src-python">z3.solve(symbolic_states)
[n0_1 = 15/2,
 o1 = 1/2,
 o0 = -1/2,
 i1 = 7/2,
 n1_1 = 1/2,
 n1_0 = 0,
 i0 = 4,
 n0_0 = 1/2]
</pre>
</div></li>

<li><p>
Simultating a concrete execution
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #dcaeea;">i0</span>, <span style="color: #dcaeea;">i1</span>, <span style="color: #dcaeea;">n0_0</span>, <span style="color: #dcaeea;">n0_1</span>, <span style="color: #dcaeea;">o0</span>, <span style="color: #dcaeea;">o1</span> = z3.Reals(<span style="color: #98be65;">"i0 i1 n0_0 n0_1 o0 o1"</span>)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">finding outputs when inputs are fixed [i0 == 1, i1 == -1]</span>
g = z3.And([i0 == 1.0, i1 == -1.0])
z3.solve(z3.And(symbolic_states, g))  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">we get o0, o1 = 1, -1</span>
[n0_1 = 0,
o1 = -1,
o0 = 1,
i1 = -1,
n1_1 = 0,
n1_0 = 1,
i0 = 1,
n0_0 = 2]
</pre>
</div></li>

<li><p>
Checking assertions
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #c678dd;">print</span>(<span style="color: #98be65;">"Prove that if (n0_0 &gt; 0.0 and n0_1 &lt;= 0.0) then o0 &gt; o1"</span>)
<span style="color: #dcaeea;">g</span> = z3.Implies(z3.And([n0_0 &gt; 0.0, n0_1 &lt;= 0.0]), o0 &gt; o1)
<span style="color: #c678dd;">print</span>(g)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Implies(And(i0 - i1 &gt; 0, i0 + i1 &lt;= 0), o0 &gt; o1)</span>
z3.prove(z3.Implies(symbolic_states, g))  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">proved</span>

<span style="color: #c678dd;">print</span>(<span style="color: #98be65;">"Prove that when (i0 - i1 &gt; 0 and i0 + i1 &lt;= 0), then o0 &gt; o1"</span>)
<span style="color: #dcaeea;">g</span> = z3.Implies(z3.And([i0 - i1 &gt; 0.0, i0 + i1 &lt;= 0.0]), o0 &gt; o1)
<span style="color: #c678dd;">print</span>(g)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Implies(And(i0 - i1 &gt; 0, i0 + i1 &lt;= 0), o0 &gt; o1)</span>
z3.prove(z3.Implies(symbolic_states, g))
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">proved</span>

<span style="color: #c678dd;">print</span>(<span style="color: #98be65;">"Disprove that when i0 - i1 &gt;0, then o0 &gt; o1"</span>)
<span style="color: #dcaeea;">g</span> = z3.Implies(i0 - i1 &gt; 0.0, o0 &gt; o1)
<span style="color: #c678dd;">print</span>(g)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Implies(And(i0 - i1 &gt; 0, i0 + i1 &lt;= 0), o0 &gt; o1)</span>
z3.prove(z3.Implies(symbolic_states, g))
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">counterexample</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">[n0_1 = 15/2,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">i1 = 7/2,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">o0 = -1/2,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">o1 = 1/2,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">n1_0 = 0,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">i0 = 4,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">n1_1 = 1/2,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">n0_0 = 1/2]</span>
</pre>
</div></li>
</ol>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-computer.html">computer</a> <a href="./tag-blog.html">blog</a> <a href="./tag-research.html">research</a> </div>]]></description>
  <category><![CDATA[computer]]></category>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[research]]></category>
  <link>./dnn.html</link>
  <guid>./dnn.html</guid>
  <pubDate>Fri, 28 May 2021 03:39:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[My CV LaTeX Setup]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgee18ec4">1. Bib files</a>
<ul>
<li><a href="#orga500baf">1.1. BibLaTeX</a></li>
<li><a href="#orgf98c932">1.2. A single <code>bib</code> file</a></li>
</ul>
</li>
<li><a href="#conditions">2. Generating different outputs</a></li>
<li><a href="#orgfc20b19">3. Other stuff</a>
<ul>
<li><a href="#orgb5fbc7e">3.1. The <code>enumitem</code> package</a></li>
<li><a href="#orga1947a1">3.2. Other Macros</a></li>
</ul>
</li>
<li><a href="#org8950b28">4. Building</a></li>
</ul>
</div>
</nav>
<p>
Worked my CV in \(\LaTeX\) + BibLaTeX over the weekend.  Quite some work but I am happy with the result <a href="https://github.com/dynaroars/latex-cv/blob/main/cv-nguyen.pdf">cv-nguyen.pdf</a> (built from these 3 files <a href="https://raw.githubusercontent.com/dynaroars/latex-cv/main/cv.tex">cv.tex</a>, <a href="https://raw.githubusercontent.com/dynaroars/latex-cv/main/cv.bib">cv.bib, </a><a href="https://raw.githubusercontent.com/dynaroars/latex-cv/main/tvn.png">tvn.png</a> using these <a href="#org8950b28">commands).</a> The full git repo is at <a href="https://github.com/dynaroars/latex-cv">https://github.com/dynaroars/latex-cv</a>.
</p>

<p>
Here are some main things the CV has:
</p>

<ul class="org-ul">
<li><b>Minimal</b>:  build from scratch, e.g., <code>documentclass{article}</code>; just use some few common packages; very little customizations (default on most things).  This is a personal preference as I try to avoid using too many additional packages and having to learn about them.</li>

<li><b>Use a single <code>.bib</code> file</b> to generate publications: also customize various fields (e.g., bold and styles to specific authors, conference names, etc).</li>

<li><b>Can generate different versions</b>: generate different contents depending on a boolean flag. I have a single flag that when <code>true</code>, generate my CV based on required format for College of Engineering, and when <code>false</code>, generate a CV for my own use. Both versions share as much contents as possible.</li>
</ul>

<div id="outline-container-orgee18ec4" class="outline-2">
<h2 id="orgee18ec4"><span class="section-number-2">1.</span> Bib files</h2>
<div class="outline-text-2" id="text-1">
<p>
Previously, I put my publication entries directly in the CV.  But since I have already maintained a <code>cv.bib</code> file containing all my publications, I can just use information from that file instead. This means integrating my CV with <code>cv.bib</code>.
</p>

<p>
It is easy to just print out entries from a bib file (e.g., using <code>natlib</code> with <code>\bibentry{key}</code>  or <code>biblatex</code> with <code>\fullcite{key}</code>).  However, I also want some customizations in certain bib fields (e.g., some conferences or journalds being bold and different formatting for my students, and additional information like url, acceptance rates).  One easy way is to add these customizations directly to the bib entries in the <code>cv.bib</code> file (e.g.,  we can do <code>author={\textbf{authorA}, authorB}</code>).  But this will affect other files that use the modfified entries in <code>cv.bib</code>.  There are also various suggestions on hacking the bib display driver or style, but these hacks break easily and I found them complicated and not <i>elegant</i>.  
</p>

<p>
After various tries, I end up with this approach of "extending" bib entries using <code>crossref</code> and customizing specific fields.  I found this approach easy and does not mess up my original bib entries.
</p>
</div>

<div id="outline-container-orga500baf" class="outline-3">
<h3 id="orga500baf"><span class="section-number-3">1.1.</span> BibLaTeX</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Below I describe the method using <code>biblatex</code> and <code>biber</code> (<code>bibtex</code> should work similarly). My preamble has something like this
</p>
<div class="org-src-container">
<pre class="src src-latex">
<span style="color: #51afef;">\documentclass</span>[11pt]{<span style="color: #c678dd;">article</span>}

<span style="color: #5B6268;">% </span><span style="color: #5B6268;">the max parameters limit the number of authors,  e.g., print et al after the first 10 names</span>
<span style="color: #51afef;">\usepackage</span>[backend=biber,doi=false,isbn=false,maxcitenames=10,maxbibnames=10,style=alphabetic]{<span style="color: #c678dd;">biblatex</span>}
<span style="color: #51afef;">\addbibresource</span>{cv.bib}  
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf98c932" class="outline-3">
<h3 id="orgf98c932"><span class="section-number-3">1.2.</span> A single <code>bib</code> file</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Consists of 2 parts:  the first part are regular bib entries, the second are additional customizations and formats for those entries.  
</p>

<ol class="org-ol">
<li><p>
This part contains standard bib entries, e.g., 
</p>
<div class="org-src-container">
<pre class="src src-bibtex"><span style="color: #c678dd;">@inproceedings</span>{<span style="color: #a9a1e1;">nguyen2021gentree</span>,
  <span style="color: #dcaeea;">title</span>={GenTree: Using decision trees to learn interactions for configurable software},
  <span style="color: #dcaeea;">author</span>={Nguyen, KimHao and Nguyen, ThanhVu},
  <span style="color: #dcaeea;">booktitle</span>={International Conference on Software Engineering (ICSE)},
  <span style="color: #dcaeea;">pages</span>={1598--1609},
  <span style="color: #dcaeea;">year</span>={2021},
  <span style="color: #dcaeea;">organization</span>={IEEE}
}

<span style="color: #c678dd;">@article</span>{<span style="color: #a9a1e1;">le2020dynamite</span>,
  <span style="color: #dcaeea;">title</span>     = {DynamiTe: dynamic termination and non-termination proofs},
  <span style="color: #dcaeea;">author</span>    = {Le, TonChanh and Antonopoulos, Timos and Fathololumi, Parisa and Koskinen, Eric and Nguyen, ThanhVu},
  <span style="color: #dcaeea;">journal</span>   = {Proceedings of the ACM on Programming Languages},
  <span style="color: #dcaeea;">volume</span>    = {4},
  <span style="color: #dcaeea;">number</span>    = {OOPSLA},
  <span style="color: #dcaeea;">pages</span>     = {1--30},
  <span style="color: #dcaeea;">year</span>      = {2020},
  <span style="color: #dcaeea;">publisher</span> = {ACM New York, NY, USA}
}
... 
</pre>
</div></li>

<li><p>
This part has bib entries that "inherit" the standard ones in the previous part. They allow us to customize the standard bib entries , e.g., <b>bold</b> top venues, students' names, additional info such as acceptance rate, etc.
</p>

<div class="org-src-container">
<pre class="src src-bibtex">
<span style="color: #c678dd;">@String</span>{
<span style="color: #a9a1e1;">ICSE</span>={\textbf{International Conference on Software Engineering (ICSE)}}}
<span style="color: #c678dd;">@String</span>{
<span style="color: #a9a1e1;">PACMPL</span>={\textbf{Proceedings of the ACM on Programming Languages}}
}
...

<span style="color: #c678dd;">@inproceedings</span>{<span style="color: #a9a1e1;">nguyen2021gentreec</span>,
<span style="color: #dcaeea;">crossref</span> = {<span style="color: #51afef; font-weight: bold; text-decoration: underline;">nguyen2021gentree</span>},
<span style="color: #dcaeea;">author</span>={Nguyen<span style="color: #98be65;">$^1$</span>, KimHao and Nguyen, ThanhVu},
<span style="color: #dcaeea;">booktitle</span>=ICSE,
<span style="color: #dcaeea;">url</span>={<span style="color: #51afef; font-weight: bold; text-decoration: underline;">https://dynaroars.github.io/pubs/nguyen2021gentree.pdf</span>},
<span style="color: #dcaeea;">addendum</span>={acceptance rate 22\%}
}

<span style="color: #c678dd;">@article</span>{<span style="color: #a9a1e1;">le2020dynamitec</span>,
<span style="color: #dcaeea;">crossref</span>={<span style="color: #51afef; font-weight: bold; text-decoration: underline;">le2020dynamite</span>},
  <span style="color: #dcaeea;">journal</span> = PACMPL,
  <span style="color: #dcaeea;">url</span>={<span style="color: #51afef; font-weight: bold; text-decoration: underline;">https://dynaroars.github.io/pubs/le2020dynamite.pdf</span>},
  <span style="color: #dcaeea;">addendum</span>= {acceptance rate 36\%}
}

...
</pre>
</div></li>
</ol>

<p>
<span class="underline">Note</span>: you can also create 2 <code>bib</code> files for these two parts (but I prefer to have as few files as possible).
</p>

<p>
As can be seen, the entries from from the second part inherit those from the first part using <code>crossref</code>, and override only fields that need to be customized (e.g., <code>booktile</code> and <code>author</code> in <code>nguyen2021gentreec</code>). Entries from the second part also contain additional fields and information such as <code>url</code> and <code>acceptance rate</code>.
</p>

<p>
Now all I need to do is use cite the keys in the second part in my main <code>TeX</code> files, e.g., calling <code>\fullcite{nguyen2021gentreec}</code>
will display the <code>nguyen2021gentree</code> standard entry in  but with customized author and book title, and the new information on url and acceptance rates.  For example, the following 
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">itemize</span>}
<span style="color: #51afef;">\item</span> <span style="color: #51afef;">\fullcite</span>{nguyen2021gentreec}
<span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">itemize</span>}
</pre>
</div>

<p>
will display:
</p>

<ul class="org-ul">
<li>KimHao Nguyen\(^1\) and ThanhVu Nguyen. “GenTree: Using decision trees to learn interactions for configurable software”. In: <b>International Conference on Software Engineering (ICSE)</b>. IEEE. 2021, pp. 1598–1609. url: <a href="https://dynaroars.github.io/pubs/nguyen2021gentree.pdf">https://dynaroars.github.io/pubs/nguyen2021gentree.pdf</a>. acceptance rate 22%</li>
</ul>


<p>
Of course, we can add other customizations like changing color of authors and other fancy stuff by additing LaTeX commands to the entry like above (e.g., <code>\textbf{...}</code>). For example, instead of having a separate URL field, you might want directly link the title to the file like this
</p>

<div class="org-src-container">
<pre class="src src-bibtex">
<span style="color: #c678dd;">@inproceedings</span>{<span style="color: #a9a1e1;">nguyen2021gentreec</span>,
<span style="color: #dcaeea;">crossref</span> = {<span style="color: #51afef; font-weight: bold; text-decoration: underline;">nguyen2021gentree</span>},
<span style="color: #dcaeea;">title</span>={\href{https://dynaroars.github.io/pubs/nguyen2021gentree.pdf}{GenTree: Using decision trees to learn interactions for configurable software}},
<span style="color: #dcaeea;">author</span>={Nguyen<span style="color: #98be65;">$^1$</span>, KimHao and Nguyen, ThanhVu},
<span style="color: #dcaeea;">booktitle</span>=ICSE,
<span style="color: #dcaeea;">addendum</span>={acceptance rate 22\%}
}
</pre>
</div>

<p>
A note on <b>naming convention</b>: I simply append the letter <code>c</code> to the keys to indicate customized bib entries.  I also use the Google Scholar naming convention (<code>LastnameYearFirstWordInTitle</code>) to manage my bib entries and pdf files.  
</p>
</div>
</div>
</div>

<div id="outline-container-conditions" class="outline-2">
<h2 id="conditions"><span class="section-number-2">2.</span> Generating different outputs</h2>
<div class="outline-text-2" id="text-conditions">
<p>
Previously, I maintain 2 CV versions:  a personal one (posted on my website and updated more frequently) and a work one (for annual evaluation with the College of Engineering).  They have many differences in styles and structures but also share many things (after all, both are about me!).  So now I decide to merge them into one so that I can reuse things and only have to maintain only one version.  The simplest way I found is simply using conditions in the <b><code>etoolbox</code></b> package.
</p>

<p>
In the preamble, I have    
</p>
<div class="org-src-container">
<pre class="src src-latex">
<span style="color: #51afef;">\newtoggle</span>{usecoe}
<span style="color: #51afef;">\settoggle</span>{usecoe}{false} <span style="color: #5B6268;">% not CoE version</span>
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\coe</span>}[1]{<span style="color: #51afef;">\iftoggle</span>{usecoe}{#1}{}}
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\notcoe</span>}[1]{<span style="color: #51afef;">\nottoggle</span>{usecoe}{#1}{}}
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\coeite</span>}[2]{<span style="color: #51afef;">\iftoggle</span>{usecoe}{#1}{#2}}
</pre>
</div>

<p>
Alternatively, if you don't want to use <code>etoolbox</code>, you can use something like below
</p>
<div class="org-src-container">
<pre class="src src-latex">
<span style="color: #51afef;">\newif\ifusecoe</span>
<span style="color: #5B6268;">%</span><span style="color: #5B6268;">\usecoetrue  </span>
<span style="color: #51afef;">\usecoefalse</span>  <span style="color: #5B6268;">% not CoE version</span>
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\coe</span>}[1]{{<span style="color: #51afef;">\ifusecoe</span> #1<span style="color: #51afef;">\fi</span>}}
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\notcoe</span>}[1]{{<span style="color: #51afef;">\ifusecoe</span> <span style="color: #51afef;">\else</span> #1 <span style="color: #51afef;">\fi</span>}}
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\coeite</span>}[2]{{<span style="color: #51afef;">\ifusecoe</span> #1 <span style="color: #51afef;">\else</span> #2<span style="color: #51afef;">\fi</span>}}

</pre>
</div>

<p>
This allows me to have something such as
</p>
<div class="org-src-container">
<pre class="src src-latex">
<span style="color: #5B6268;">% </span><span style="color: #5B6268;">CoE requires this section, so only include this when \coetrue is set</span>
<span style="color: #51afef;">\coe</span>{
  <span style="color: #51afef;">\section</span>{<span style="color: #c678dd;">CoE Specific</span>} 
  ...
}


<span style="color: #5B6268;">% </span><span style="color: #5B6268;">Only include this when not generating a CV format, i.e., \coefalse is set</span>
<span style="color: #51afef;">\notcoe</span>{
  <span style="color: #51afef;">\section</span>{<span style="color: #c678dd;">Personal</span>} 
  ...
}


<span style="color: #5B6268;">% </span><span style="color: #5B6268;">Or switch things</span>
<span style="color: #51afef;">\coeite</span>{
  <span style="color: #51afef;">\section</span>{<span style="color: #c678dd;">CoE Specific</span>}
  ...
}
{
  <span style="color: #51afef;">\section</span>{<span style="color: #c678dd;">Personal</span>}
  ...
}

<span style="color: #5B6268;">% </span><span style="color: #5B6268;">another example</span>
I like the College of <span style="color: #51afef;">\coeite</span>{Engineering}{Art and Science}  

</pre>
</div>
</div>
</div>

<div id="outline-container-orgfc20b19" class="outline-2">
<h2 id="orgfc20b19"><span class="section-number-2">3.</span> Other stuff</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-orgb5fbc7e" class="outline-3">
<h3 id="orgb5fbc7e"><span class="section-number-3">3.1.</span> The <code>enumitem</code> package</h3>
<div class="outline-text-3" id="text-3-1">
<p>
I use the <code>enumitem</code> package to itemize/enumerate and reference things with releveant prefixes (e.g., conference papers with C and journals paper with J,  e.g.,  My undergraduate freshman student, KimHao, got a full research paper at ICSE'21 [C1])
</p>

<div class="org-src-container">
<pre class="src src-latex">
  <span style="color: #5B6268;">% Conference paper list</span>
  <span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">enumerate</span>}[label=C<span style="color: #51afef;">\arabic*</span>]
    <span style="color: #51afef;">\item</span> <span style="color: #51afef;">\label</span>{<span style="color: #a9a1e1;">nguyen2021gentree</span>} <span style="color: #51afef;">\fullcite</span>{nguyen2021gentreec}
  <span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">enumarate</span>}

  <span style="color: #5B6268;">% Journal paper list</span>
  <span style="color: #51afef;">\begin</span>{<span style="color: #c678dd;">enumerate</span>}[label=J<span style="color: #51afef;">\arabic*</span>]
    <span style="color: #51afef;">\item</span> <span style="color: #51afef;">\label</span>{<span style="color: #a9a1e1;">le2020dynamite</span>} <span style="color: #51afef;">\fullcite</span>{le2020dynamitec}
  <span style="color: #51afef;">\end</span>{<span style="color: #c678dd;">enumarate</span>}

<span style="color: #5B6268;">% </span><span style="color: #5B6268;">referering to a paper</span>
My undergraduate freshman student, KimHao, got a full research paper at ICSE'21~<span style="color: #51afef;">\ref</span>{<span style="color: #a9a1e1;">nguyen2021gentree</span>}.
</pre>
</div>
</div>
</div>

<div id="outline-container-orga1947a1" class="outline-3">
<h3 id="orga1947a1"><span class="section-number-3">3.2.</span> Other Macros</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Other than the <code>\coe</code>, <code>\notcoe</code>, <code>\coeite</code> macros <a href="#conditions">above</a>, I have several more macros to make things easier.  I try not to use too many macros to keep things simple.  One macros that I use often for listing publication entries is
</p>
<div class="org-src-container">
<pre class="src src-latex"><span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\mypubc</span>}[2]{<span style="color: #51afef;">\item</span> <span style="color: #51afef;">\label</span>{<span style="color: #a9a1e1;">#1</span>} <span style="color: #51afef;">\fullcite</span>{#1c}<span style="color: #51afef;">\coe</span>{, contribution #2}}   <span style="color: #5B6268;">%label,contribution percentage (CoE only)</span>
</pre>
</div>

<p>
This allows me to not having to type 
</p>
<div class="org-src-container">
<pre class="src src-latex">
<span style="color: #51afef;">\item</span> <span style="color: #51afef;">\label</span>{<span style="color: #a9a1e1;">nguyen2021gentree</span>} <span style="color: #51afef;">\fullcite</span>{nguyen2021gentreec}
</pre>
</div>

<p>
like above. Instead, I can just type
</p>
<div class="org-src-container">
<pre class="src src-latex">
<span style="color: #51afef;">\mypubc</span>{nguyen2021gentree}{50<span style="color: #51afef;">\%</span>}
</pre>
</div>

<p>
The last argument <code>#2</code> is an additional information that only appears in the CoE version (to show how much you contribute in a paper, 50% in this example).  
</p>
</div>
</div>
</div>

<div id="outline-container-org8950b28" class="outline-2">
<h2 id="org8950b28"><span class="section-number-2">4.</span> Building</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">
<pre class="src src-shell">$ latexmk -c  <span style="color: #5B6268;">#</span><span style="color: #5B6268;">clean up things but don't delete pdf/dvi outputs</span>
$ <span style="color: #5B6268;"># </span><span style="color: #5B6268;">latexmk -C  #really clean up everything</span>
$ latexmk cv.tex -pdf  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">build the file , this will also invoke biber (or bitex) and does everything</span>
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-tex.html">TeX</a> <a href="./tag-cv.html">cv</a> </div>]]></description>
  <category><![CDATA[TeX]]></category>
  <category><![CDATA[cv]]></category>
  <link>./cv.html</link>
  <guid>./cv.html</guid>
  <pubDate>Mon, 24 May 2021 03:39:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Writing]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#writing-papers">1. Writing Technical Papers</a>
<ul>
<li><a href="#orga167872">1.1. Order</a></li>
<li><a href="#paper-naming-convention">1.2. Paper naming convention</a></li>
<li><a href="#citation">1.3. Citation</a></li>
<li><a href="#org42e0667">1.4. Do and Don't</a></li>
<li><a href="#org805cd5d">1.5. Trimming / Space saving</a></li>
<li><a href="#orgffde324">1.6. Miscs</a></li>
</ul>
</li>
<li><a href="#git-repo">2. Managing Git repo and File structures</a>
<ul>
<li><a href="#paper-structure">2.1. Paper structure</a></li>
<li><a href="#after-submission">2.2. After submission</a></li>
<li><a href="#orgd85a822">2.3. After rebuttal</a></li>
</ul>
</li>
<li><a href="#orgcce473b">3. Quick Fixes</a></li>
<li><a href="#presentation">4. Presentation/Talk</a></li>
<li><a href="#org10fa6fa">5. Useful Links</a></li>
</ul>
</div>
</nav>
<p>
Managing my \(\LaTeX\) writings. 
</p>

<div id="outline-container-writing-papers" class="outline-2">
<h2 id="writing-papers"><span class="section-number-2">1.</span> Writing Technical Papers</h2>
<div class="outline-text-2" id="text-writing-papers">
</div>


<div id="outline-container-orga167872" class="outline-3">
<h3 id="orga167872"><span class="section-number-3">1.1.</span> Order</h3>
<div class="outline-text-3" id="text-1-1">
<p>
I often write papers in the following order. For a concrete example, see the <a href="https://dynaroars.github.io/pubs/ishimwe2021dynaplex.pdf">Dynaplex paper</a> published at OOPSLA'21.
</p>

<ol class="org-ol">
<li><code>Overview</code> section (Section 2).
<ul class="org-ul">
<li>start with this section, which should contain an <code>illustrative example</code>.
<ul class="org-ul">
<li>after reading this illustrative example (and perhaps the <code>Introduction</code>, the readers should have a good understanding of the approach.</li>
<li><i>The goal is to have the readers (or reviewers) make up their mind whether they like or do not like the proposed work after reading this part</i>.</li>
</ul></li>
<li>A good place to add some overview <code>figure</code> highlighting the main components of the technique or tool.</li>
<li>Can also summarize background or important concepts in this section</li>
<li>Typically contains:
<ul class="org-ul">
<li>An architecture or overview figure of the approach (e.g., Fig 1 in the Dynaplex paper)</li>
<li>A motivation or illustration example
<ul class="org-ul">
<li>Sec 2.1: Show how Dynaplex works at high level on an input program, what results does it produce.</li>
</ul></li>
<li>Main definitions and background (optional)
<ul class="org-ul">
<li>Sec 2.2: general background on dynamic inference and specific features/properties of Dynaplex</li>
</ul></li>
</ul></li>
</ul></li>

<li><code>Experimental</code> section (Section 4).
<ol class="org-ol">
<li>Some implementation details</li>
<li>Benchmark programs: descript benchmarks used</li>
<li>Experiment Setup
<ul class="org-ul">
<li>Machine specs</li>
<li>How experiments were run (multiple times and report the mean, etc)</li>
</ul></li>
<li>Research Questions
<ul class="org-ul">
<li>E.g., How accurate is the technique? How efficient ?  Comparing to existing approaches</li>
<li>Experimental results are designed to answer these questions</li>
</ul></li>
</ol></li>

<li><code>Algorithm/Techniques</code> (Section 3)</li>

<li><code>Related Work</code> (Section 5)
<ul class="org-ul">
<li>Break into multiple subsections if necessary</li>
<li>After each subsection that talks about related work, have a new paragraph and talk about why my work is different/related to other work.</li>
</ul></li>

<li><code>Conclusion</code> (Section 6).
<ul class="org-ul">
<li>This should be the <i>conclusion</i> not the <i>summary</i>.</li>
<li>Future work can also go here</li>
</ul></li>

<li><code>Introduction</code> (Section 1).
<ul class="org-ul">
<li>write this last, because by the time I write the Intro, I would already have all needed info (e.g., so I can summarize the diff with state of the art, technical contributions, and results.</li>
<li>Typically contains several main things:
<ul class="org-ul">
<li>What is the problem?  Why is it important (i.e., if we can solve it, then what do we accomplishes)?</li>
<li>Existing work:  basically answering why it is challenging (i.e., why existing work is not sufficient)?</li>
<li>The proposed approach of this paper: how does it address the limitations of existing work listed above?  What other benefits does it have?</li>
<li>Results: briefly summarize the results.</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>



<div id="outline-container-paper-naming-convention" class="outline-3">
<h3 id="paper-naming-convention"><span class="section-number-3">1.2.</span> Paper naming convention</h3>
<div class="outline-text-3" id="text-paper-naming-convention">
<ul class="org-ul">
<li>I use Google Scholar's convention  <code>lastnameoffirstauthor~publishedyear~firsttitleword</code>, e.g., <code>nguyen2021gentree.pdf</code> for the paper  <code>KimHao Nguyen and ThanhVu Nguyen. GenTree: Using Decision Trees to Learn Interactions for Configurable Software</code></li>
<li>I also use this convention for <code>bibtex</code> entry and reference, e.g.,
<code>GenTree paper~\cite{nguyen2021gentree}</code></li>
<li>If there's a conflict, then append the name with a number, e.g.,
<code>nguyen2021gentree1</code>, <code>nguyen2021gentree2</code></li>
</ul>
</div>
</div>



<div id="outline-container-citation" class="outline-3">
<h3 id="citation"><span class="section-number-3">1.3.</span> Citation</h3>
<div class="outline-text-3" id="text-citation">
<ul class="org-ul">
<li><p>
As with <a href="#paper-naming-convention">paper naming</a>, for citation I follow Google Scholar's convention and thus often use Google Scholar to search for  <code>bibtex</code> entry of a paper I want to cite.  For example, to cite the GenTree example paper, I search for it on Google Scholar and get the <code>bibtex</code> content.
</p>
<div class="org-src-container">
<pre class="src src-bibtex"><span style="color: #c678dd;">@inproceedings</span>{<span style="color: #a9a1e1;">nguyen2021gentree</span>,
  <span style="color: #dcaeea;">title</span>={GenTree: Using decision trees to learn interactions for configurable software},
  <span style="color: #dcaeea;">author</span>={Nguyen, KimHao and Nguyen, ThanhVu},
  <span style="color: #dcaeea;">booktitle</span>={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
  <span style="color: #dcaeea;">pages</span>={1598--1609},
  <span style="color: #dcaeea;">year</span>={2021},
  <span style="color: #dcaeea;">organization</span>={IEEE}
}
</pre>
</div></li>
</ul>
<p>
Then I copy/paste this <code>bibtex</code> content to my the bib file of my project, and cite the paper with <code>\cite{nguyen2021gentree}</code>.
</p>
</div>
</div>

<div id="outline-container-org42e0667" class="outline-3">
<h3 id="org42e0667"><span class="section-number-3">1.4.</span> Do and Don't</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>Do
<ul class="org-ul">
<li>Split into multiple paragraphs.  Long paragraphs are simply hard to read!</li>
</ul></li>

<li>Do not

<ul class="org-ul">
<li>Delay talking about the main work until the 2nd page of the introduction.  It's not good if people read a whole page and still don't know what you're proposing!</li>

<li><p>
Use unnecessary roadmaps.  Eg.., at the end of an intro, many papers have something like this
</p>
<div class="org-src-container">
<pre class="src src-txt">This paper is organized as follows. In Section 2, we describe the background. In Section 3, we establish theorem X. In Section 4, we describe algorithm Y and implementation Z. In Section 5, we present experimental results from our implementation and compare to the state of the art.  In Section 6, we review related work and conclude in Section 7.
</pre>
</div>
<ul class="org-ul">
<li>This might make sense for a long Ph.D. thesis or book (in fact, I wouldn't use this roadmap even for these), but doesn't make much sense for a 10 page paper where one easily guess all these from the section names?</li>
</ul></li>

<li><p>
Similarly, we can elimiate roadmap at the beginning of a section
</p>
<div class="org-src-container">
<pre class="src src-txt">In this section, we first describe X, then present Y.  We also do Z.
</pre>
</div>
<ul class="org-ul">
<li>This might be OK, especially for a long section.  But in general I prefer just start talking about the main stuff in the section.</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>



<div id="outline-container-org805cd5d" class="outline-3">
<h3 id="org805cd5d"><span class="section-number-3">1.5.</span> Trimming / Space saving</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>Rewrite and shorten sentences!!</li>
</ul>
</div>
</div>


<div id="outline-container-orgffde324" class="outline-3">
<h3 id="orgffde324"><span class="section-number-3">1.6.</span> Miscs</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li><p>
One setence per line
</p>

<pre class="example" id="orgf532f8d">
This is a line.
This is another, longer line.
</pre></li>

<li>If possible, put figures, tables, code, etc on top, e.g., using
<code>\begin{figure}[t]</code></li>
<li><p>
Rewrite to avoid lines with single or lone words
</p>

<pre class="example" id="orgef4f699">
It just looks
bad.
</pre></li>

<li><p>
Comment:  so that my coauthors and I can add comments to paper, e.g., <code>\tvn{This is my comment}</code> 
</p>
<div class="org-src-container">
<pre class="src src-latex"><span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\mycomment</span>}[3][<span style="color: #51afef;">\color</span>{red}]{{#1{[{#2}: {#3}]}}}
<span style="color: #51afef;">\newcommand</span>{<span style="color: #c678dd;">\tvn</span>}[1]{<span style="color: #51afef;">\mycomment</span>[<span style="color: #51afef;">\color</span>{red}]{TVN}{#1}}
</pre>
</div></li>
</ul>
</div>
</div>
</div>


<div id="outline-container-git-repo" class="outline-2">
<h2 id="git-repo"><span class="section-number-2">2.</span> Managing Git repo and File structures</h2>
<div class="outline-text-2" id="text-git-repo">
<ul class="org-ul">
<li>1 Git repo for each paper
<ul class="org-ul">
<li>Name the repo <code>paper_name</code>, e.g., <code>paper_gentree</code> where <code>gentree</code> is the name of the work.</li>
<li>I do not put conference name as part of the repo name because it might end up not being in that conference. Instead I use git <code>tag</code> (<a href="#after-submission">shown below</a>) to identify submission to conference.</li>
</ul></li>
</ul>
</div>

<div id="outline-container-paper-structure" class="outline-3">
<h3 id="paper-structure"><span class="section-number-3">2.1.</span> Paper structure</h3>
<div class="outline-text-3" id="text-paper-structure">
<ul class="org-ul">
<li>1 directory per paper (which is a clone of a Github repo as described <a href="#git-repo">above</a>), e.g., <code>paper_gentree/</code></li>
<li>Within the directory, I use very few files:
<ul class="org-ul">
<li><code>paper.tex</code>: I use a single \(\TeX\) file for the entire paper.
<ul class="org-ul">
<li>Others like to split into multiple files (e.g., <code>intro.tex</code>, <code>eval.txt</code>, <code>related.txt</code>, etc). But I find it easier for me to just use 1 file. Even when sharing or collaborating with others, in which conflict edits can arise, a single file still works well as git is pretty good at resolving conflict issues.</li>
</ul></li>
<li><code>paper.bib</code>: I use a single <code>bib</code> file for bibs. My collaborators sometimes put in their own <code>bib</code> files.</li>
<li><code>arch.(pdf|png)</code> (optional): a diagram describing the architecture of the framework or tool</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-after-submission" class="outline-3">
<h3 id="after-submission"><span class="section-number-3">2.2.</span> After submission</h3>
<div class="outline-text-3" id="text-after-submission">
<p>
After submitting a paper, I save a copy of the submitted pdf file and create a tag for the latest commit to keep a history of that submission.
</p>

<ol class="org-ol">
<li><p>
Save the submitted pdf file as <code>VenueYearX.pdf</code>, where <code>X</code> is <code>submit</code> for the original submission version, <code>final</code> for final (camera-ready) version, and <code>rI</code> for the \(i^{th}\) revision for additional revision submissions between the original submission and final (e.g., for jounal).
</p>
<pre class="example" id="org5450456">
git add icse2021submit.pdf  
</pre></li>
<li><p>
Create an annotated <code>tag</code> for the commit
</p>
<pre class="example" id="orga116e20">
git tag -a icse2021submit -m "ICSE 2021 original submission" commit_hashid (optional)
git push origin icse2021submit
git show icse2020submit
</pre></li>
</ol>
</div>
</div>

<div id="outline-container-orgd85a822" class="outline-3">
<h3 id="orgd85a822"><span class="section-number-3">2.3.</span> After rebuttal</h3>
<div class="outline-text-3" id="text-2-3">
<p>
After submitting a rebuttal, save a copy of the reviews and rebuttal as a plain <code>text</code> file
</p>
<pre class="example" id="org21a60cb">
git add pldi2023-reviews.txt
git commit -am "reviews and rebuttal"
</pre>
</div>
</div>
</div>


<div id="outline-container-orgcce473b" class="outline-2">
<h2 id="orgcce473b"><span class="section-number-2">3.</span> Quick Fixes</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>Avoid passive tense</li>
<li>Know the difference between <i>Such as</i>  and <i>like</i></li>
<li>Avoid long paragraphs</li>
<li>Spell out numbers less than 10 (<i>three</i> steps instead of <i>3</i> steps).</li>
<li>Use Eq. X instead of Equation X</li>
<li>Don't put <i>etc</i> in e.g., or such as</li>
<li>In order to do this -&gt; To do this</li>
<li>New paragraph for new thought/idea. Sentences in the same paragraph should be connected.</li>
</ol>
</div>
</div>

<div id="outline-container-presentation" class="outline-2">
<h2 id="presentation"><span class="section-number-2">4.</span> Presentation/Talk</h2>
<div class="outline-text-2" id="text-presentation">
<ul class="org-ul">
<li>Slides

<ul class="org-ul">
<li>Put numbers on every slide: so that people can refer to slide X</li>
<li>For an N-minute presentation: create about N slides</li>
<li>Don't put too much words, also no need to put full sentences</li>
</ul></li>
</ul>
</div>
</div>






<div id="outline-container-org10fa6fa" class="outline-2">
<h2 id="org10fa6fa"><span class="section-number-2">5.</span> Useful Links</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="http://www.cs.cmu.edu/%7Ejrs/sins.html">http://www.cs.cmu.edu/%7Ejrs/sins.html</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-computer.html">computer</a> <a href="./tag-setup.html">setup</a> <a href="./tag-blog.html">blog</a> <a href="./tag-writing.html">writing</a> </div>]]></description>
  <category><![CDATA[computer]]></category>
  <category><![CDATA[setup]]></category>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[writing]]></category>
  <link>./writing_tips.html</link>
  <guid>./writing_tips.html</guid>
  <pubDate>Mon, 01 Feb 2021 03:39:00 -0500</pubDate>
</item>
<item>
  <title><![CDATA[Dynamic Invariant Generation and Nonlinear Properties]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge75751c">1. Abstract</a></li>
<li><a href="#orgd9c5aa3">2. Keywords</a></li>
<li><a href="#orgabc45d6">3. Introduction</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orge75751c" class="outline-2">
<h2 id="orge75751c"><span class="section-number-2">1.</span> Abstract</h2>
<div class="outline-text-2" id="text-1">
<p>
Automatically inferring invariant specifications has proven valuable in enabling a wide range of software verification and validation approaches over the past two decades. Recent approaches have shifted from using observation of concrete program states to exploiting symbolic encodings of sets of concrete program states in order to improve the quality of inferred invariants.
</p>

<p>
In this work, we demonstrate that working directly with symbolic states generated by symbolic execution approaches can improve invariant inference further.
Our technique uses a counterexample-based algorithm that iteratively creates concrete states from symbolic states, infers candidate invariants from both concrete and symbolic states, and then validates or refutes candidate invariants using symbolic states. The refutation process serves both to eliminate spurious invariants and to drive the inference process to produce more precise invariants.  This framework can be employed to infer complex invariants that capture nonlinear polynomial relations among program variables.
</p>

<p>
The open-source DIG; tool implements these ideas to automatically generate invariants at arbitrary locations in Java or C programs.
Our results show that across a collection of four benchmarks DIG; improves on the state-of-the-art by efficiently inferring more informative invariants than prior work.
</p>
</div>
</div>

<div id="outline-container-orgd9c5aa3" class="outline-2">
<h2 id="orgd9c5aa3"><span class="section-number-2">2.</span> Keywords</h2>
<div class="outline-text-2" id="text-2">
<p>
Program Invariants, Numerical Invariants, Dynamic Analysis, Symbolic Execution, CounterExample Guided Refinement, Program Testing and Verification
</p>
</div>
</div>

<div id="outline-container-orgabc45d6" class="outline-2">
<h2 id="orgabc45d6"><span class="section-number-2">3.</span> Introduction</h2>
<div class="outline-text-2" id="text-3">
<p>
The expressive power of programs lies in their ability to concisely represent
repeated sub-computations that arise due to iteration or recursion.
Developing software that correctly orchestrates those sub-computations is challenging as
programmers learn when they study even basic sorting algorithms. 
Classic approaches for defining, and understanding, the correctness of such algorithms rely on 
specification of \emph{program invariants} which define relationships
that must hold between program variables at a given location in the
program~\cite{hoare1969axiomatic,cormen2009introduction,hoare1971proof}.
</p>

<p>
While invariants play a role in educating programmers about complex algorithms,
they also offer the potential to improve programming practice.
Research has demonstrated how invariant specifications can be leveraged for
fault-detection and verification~\cite{hoare1971proof,perkins2009automatically}, 
detecting security vulnerabilities~\cite{bodik2000abcd},
automating the repair of faults~\cite{cashin2019understanding}, and
synthesizing low-level implementations~\cite{srivastava2013template}.
A number of industrial-strength tools provide support for reasoning about invariant 
specifications~\cite{coverityscan,fbinfer}.
</p>

<p>
Despite the fact that programmers are exposed to the concept of invariants early in their
education, writing specifications is viewed as a burden and developers don't generally 
add them to their code base~\cite{das2002esp}. 
One approach to addressing this is to define implicit specifications, e.g., that a null pointer
should never be dereferenced or an array should never be indexed out of bounds.  While valuable, this
does not address the potential benefit from \emph{program specific invariants}.
</p>

<p>
The seminal work by Ernst et al. on Daikon~\cite{ernst2007daikon,ernst2000dynamically} addressed this problem by observing
that invariants can be thought of as latent properties of program behavior that can be inferred
by observing sets of program runs.
Techniques like Daikon can only determine \emph{candidate invariants} &#x2013; since there may be executions
that are not observed which falsify the candidate.
Nevertheless, these techniques have proven valuable in overcoming the specification burden and
generating candidate invariants that can be subsequently verified or falsified by other 
techniques~\cite{csallner2008dysy}.
Moreover, the ability to reveal these latent properties serves as a rich source of information
for understanding undocumented code~\cite{ernst2001dynamically}, generating more formal
documentation~\cite{ernst2007daikon},
localizing bugs~\cite{b2016learning}, and even proving program termination and non-termination properties~\cite{le2020dynamite}.
</p>

<p>
Daikon~\cite{ernst2000dynamically,ernst2001dynamically} works by observing \emph{concrete program states} 
that capture the values of variables at designated \emph{locations of interest} in the
program when a program is run on a given input.  By sampling large numbers of inputs, Daikon can efficiently
determine relationships that may hold among variables across those samples.
Confirming that those relationships constitute a true invariant has been a focus of follow-on work to Daikon.
Several invariant generation approaches (e.g., iDiscovery~\cite{zhang2014feedback}, PIE~\cite{padhi2016data}, ICE~\cite{garg2016learning}, NumInv~\cite{nguyen2017counterexample}, G-CLN~\cite{yao2020learning}) use a hybrid approach that dynamically infers candidate invariants and then attempts to verify that they hold for all inputs.
When verification fails, counterexamples are generated which help to refine the invariant inference process 
to obtain more accurate results &#x2013; reporting only true invariants.
This \emph{CounterExample Guided Invariant Generation} (CEGIR) approach iterates the inference and verification processes until achieving stable results.
</p>

<p>
An important class of invariants capture numerical relations among program variables.
Such \emph{numerical invariants} can take on different mathematical forms.
Daikon can infer conjunctive numerical invariant candidates, but its template matching engine makes it
inefficient to infer disjunctive invariants. 
Disjunctive invariants are required to encode properties of programs, but fortunately rich forms of
disjunction can be captured by more complex numerical relations.
\emph{Nonlinear polynomial} relations, e.g., \(x^2 \le y^2\), arise in many scientific, engineering, and safety- and security-critical software~\cite{cousot2005astree}, and 
can encode disjunctive information, e.g., \(x^2 \le y^2\) implies \(x\le -y \vee x\le y\).
\emph{Max/min-plus} relations encode properties that can be expressed in ``tropical'' algebra~\cite{maclagan2015introduction,allamigeon2008inferring} and are able to encode a complementary form of disjunctive information, e.g., the max inequality \(\max(x,y) \ge 2\) is equivalent to \((x \ge y \land x \ge 2) \lor (x < y \land y \ge 2)\).
As we demonstrate, when used together nonlinear and max/min invariants can express complex program properties, e.g., permutation and sortedness (&sect;\ref{sec:rq3}), that cannot be expressed with purely conjunctive formulae.
</p>

<p>
In this work, we present DIG;, a CEGIR technique that targets the inference of rich forms of
numerical invariants using \emph{symbolic program states} as a basis.
Our key insight is that symbolic states generated by a symbolic execution engine are
(1) compact encodings of large (potentially infinite) sets of concrete states,
(2) naturally diverse since they arise along different execution paths,
(3) explicit in encoding relationships between program variables,
(4) amenable to direct manipulation and optimization, and 
(5) reusable across many different reasoning tasks within CEGIR algorithms.
</p>

<p>
We define algorithms for symbolic CEGIR that can be instantiated
using different symbolic execution engines, and the DIG; implementation uses symbolic states generated from Symbolic PathFinder~\cite{anand2007jpf} (SPF)&#x2014;a symbolic executor for Java&#x2014;and CIVL~\cite{siegel2015civl}&#x2014;a symbolic executor for C.
DIG; uses symbolic states for both invariant inference and verification.
For inference, DIG; uses symbolic states to obtain concrete states to bootstrap a set of candidate 
invariants using DIG~\cite{nguyen2012using,nguyen2014using,nguyen2014dig}&#x2014;a dynamic analysis framework for inferring expressive numerical invariants.
For verification, DIG; formulates verification conditions from symbolic states to confirm or refute an invariant, solves those using an SMT solver, and produces counterexamples to refine the inference process.
</p>

<p>
We evaluated DIG; over 4 distinct benchmarks, consisting of 108 programs, and compared its performance
to state-of-the-art numerical invariant approaches.
We find that the use of symbolic states allows DIG; to overcome several limitations of 
existing CEGIR approaches.
iDiscovery, which uses Daikon for inference, does not support nonlinear properties, and both ICE and PIE timeout frequently when nonlinear arithmetic is involved.
NumInv also uses DIG to infer invariants, but it invokes KLEE~\cite{cadar2008klee} as a black box verifier for candidate invariants and which causes it to underperform relative to DIG; for nonlinear and disjunctive invariant inference.
G-CLN can infer nonlinear invariants for loops, but it requires manual problem-specific configuration to generate and prove invariants, and even then DIG; infers more relevant invariants.
Our evaluation demonstrates that DIG; establishes the state-of-the-art for inference of
complex nonlinear invariants.
Across the benchmarks it is able to infer the ground truth specifications for 106 of 108 programs;
the next best tool can infer only 89.%\tvn{Is this too strong to explicitly say this number?  Technically we were not able to get other tools, e.g., G-CLN, on other benchmarks like DISJ or COMPLEXITY}.
</p>

<p>
Our prior work~\cite{nguyen2017syminfer} made an initial step in exploiting
symbolic states for invariant inference.  This paper
significantly extends those results to include:
(1) a novel efficient algorithm to generate inequalities;
(2) support for \emph{max}- and \emph{min-plus} formulae to represent disjunctive invariants;
(3) proofs of correctness and termination for the presented algorithms;
(4) support for Java and C programs; and
(5) a broader experimental evaluation that demonstrates the cost-effectiveness of the approach and its superiority to existing invariant inference techniques.
The implementation of DIG; and  all experimental data reported in this paper are available at \url{https://github.com/unsat/dig/}.
These results strongly suggest that symbolic states form a powerful basis for computing program invariants.
They permit an approach that blends the best features of dynamic inference techniques and purely symbolic techniques to enable a new state-of-the-art.
</p>



<p>
% \IEEEPARstart{T}{he} automated discovery of \emph{program invariants}&#x2014;relations among variables that are guaranteed to hold at certain locations of a program&#x2014;is an important research area in program analysis, verification, and synthesis.
% Generated invariants can help understand undocumented programs, prove correctness assertions, reason about program termination, check resource usage, establish security properties, provide formal documentation, repair programs, and more~\cite{le2020dynamite,slam,henzinger2002lazy,das2002esp,demoura:tacas08:z3,leroy:popl06:,ernst2000dynamically,nguyen2020using}.
</p>

<p>
% A particularly useful class of invariants is \emph{numerical invariants}, which involve relations among numerical program variables.
% Within numerical invariants, \emph{nonlinear polynomial} relations, e.g., \(x \le y^2\), \(x = qy + r\), arise in many scientific, engineering, and safety- and security-critical software, e.g., to prove the absence of errors in Airbus avionic systems~\cite{cousot2005astree}.
% Nonlinear relations can also encode certain form of disjunctive information, e.g., \(x\le y^2\) is \(x\le -y \vee x\le y\).
% \emph{Min/max-plus} relations are another class of numerical informations that can represent a different form of disjunction, e.g., the max inequality \(\max(x,y) \ge 2\) represents \((x > y \land x \ge 2) \lor (x < y \land y \ge 2)\).
% When used together nonlinear and min/max invariants can be complimentary and help reason about complex but useful program properties, e.g., permutation and sortedness (&sect;\ref{sec:rq3}).
</p>

<p>
% %Another complemtary class of numerical invariants that can represent disjuctions is \emph{min/max-plus} relations .
</p>


<p>
% %Disjunctive invariants, which represent the semantics of branching, are more difficult to analyze but crucial to many programs. For example, after if (p) {a=1;} else {a=2;} neither a = 1 nor a = 2 is an invariant, but (p ∧ a = 1) ∨ (¬p∧a = 2) is a disjunctive invariant. Disjunctive invariants thus capture path-sensitive reasoning, such as those found in most sorting and searching tasks, as well as functions like strncpy in the C standard library.
</p>

<p>
% Daikon~\cite{ernst2000dynamically,ernst2001dynamically} demonstrated that dynamic analysis is a practical approach to infer numerical and other invariants from \emph{concrete program states} that program execution traces observed when running the program on sample inputs.
% Dynamic inference is typically efficient and supports expressive invariants, but can often produce spurious invariants that do not hold for all possible inputs.
% Several numerical invariant generation approaches (e.g., iDiscovery~\cite{zhang2014feedback}, PIE~\cite{padhi2016data}, ICE~\cite{garg2016learning}, NumInv~\cite{nguyen2017counterexample}, G-CLN~\cite{yao2020learning}) use a hybrid approach that dynamically infers candidate invariants and then statically checks that they hold for all inputs.
% For a spurious invariant, the checker produces counterexamples, which help the inference process avoid this invariant and obtain more accurate results.
% This CEGIR \emph{(CounterExample Guided Invariant Generation)} approach iterates the inference and checking processes until achieving stable results.
</p>

<p>
% In this work, we present DIG;, a CEGIR technique and tool that uses \emph{symbolic program states}.
% Our key insight is that symbolic states generated by a symbolic execution engine are
% (1) compact encodings of large (potentially infinite) sets of concrete states,
% (2) naturally diverse since they arise along different execution paths,
% (3) explicit in encoding relationships between program variables,
% (4) amenable to direct manipulation and optimization, and %such as combining sets of states into a single joint encoding, and
% (5) reusable across many different reasoning tasks within CEGIR algorithms.
</p>

<p>
% We define algorithms for symbolic CEGIR that can be instantiated
% using different symbolic execution engines, and the DIG; implementation uses symbolic states generated from Symbolic PathFinder~\cite{anand:tacas07:spf} (SPF)&#x2014;a symbolic executor for Java&#x2014;and CIVL~\cite{siegel2015civl}&#x2014;a symbolic executor for C.
% DIG; uses symbolic states for both invariant inference and
% validation.
% For inference, DIG; uses symbolic states to obtain concrete states to bootstrap a set of candidate invariants using
% DIG~\cite{nguyen:icse12:dig,nguyen2014using,nguyen:tosem14:dig}&#x2014;a dynamic analysis framework for inferring expressive numerical invariants.
% For validation, DIG; formulates verification conditions from symbolic states to confirm or refute an invariant, solves those using an SMT solver, and produces counterexamples to refine the inference process.
</p>

<p>
% %TODO: min/max invariants
% Symbolic states allow DIG; to overcome several limitations of existing CEGIR approaches.
% iDiscovery, ICE, and PIE are limited to computing relatively simple numerical invariants and  often do not consider programs with complex nonlinear arithmetic and properties. % such as \(x=qy+r, x^2+y^2=z^2\).
% As our evaluation of DIG; demonstrates in Section~\ref{sec:eval},
% iDiscovery, which uses Daikon for inference, does not support nonlinear properties, and both ICE and PIE timeout frequently when nonlinear arithmetic is involved.
% The tool NumInv~\cite{nguyen2017counterexample} also uses DIG to infer invariants, but it invokes KLEE~\cite{cadar2008klee} as a blackbox
% verifier for candidate invariants.  Since KLEE is unaware of the goals
% of its verification it will attempt to explore the entire program state space
% and must recompute that state space for each candidate invariant.
% In contrast, DIG; incrementally constructs a fragment of the state space
% that generates a set of symbolic states that is sufficiently diverse
% for invariant verification and it reuses symbolic states for all invariants.
% The recent work G-CLN~\cite{yao2020learning} learns nonlinear invariants for loops using neural networks, but it requires the user to provide strong postconditions and manual tweaks to generate and prove invariants, whereas DIG; only requires the implementation.
% % and generate counterexamples
</p>

<p>
% We evaluated DIG; over 4 distinct benchmarks which consist of 108 programs.
% The study shows that DIG;:
% (1) can generate the complex nonlinear invariants expected in 28/28 of the NLA benchmarks;
% (2) can generate nonlinear relations and min/max invariants to represent interesting disjunctive properties (e.g., permutation);
% (3) is effective in finding nontrivial complexity bounds for 18/19 programs, with 4 of those improving on the best known bounds from the literature; 
% (4) can  generate invariants whose combination establish asserted properties involving relations not supported directly by DIG; for 45/46 programs; and
% (5) effectively uses symbolic execution at various depths to incrementally improve results; and
% (6) outperforms existing numerical invariant generation works, especially in generating rich invariants capturing nonlinear and disjunctive information.
</p>

<p>
% These results strongly suggest that symbolic states form a powerful basis for computing program invariants.
% They permit an approach that blends the best features of dynamic inference techniques and purely symbolic techniques. 
% The key contribution of our work lies in (i) the identification of the value
% of symbolic states in CEGIR, (ii) developing an algorithmic framework for
% adaptively computing a sufficient set of symbolic states for invariant
% inference, (iii) developing and releasing DIG; as an open-source implementation of this framework,
% and (iv) demonstrating, through our evaluation of
% DIG;, that it improves on the best known techniques.
</p>

<p>
% Our prior work~\cite{nguyen2017syminfer} made an initial step in exploiting
% symbolic states for invariant inference.
% This paper significantly extends those results to include:
% (1) a novel efficient algorithm to generate inequalities;
% (2) support for \emph{max}- and \emph{min-plus} formulae to represent disjunctive invariants;
% (3) proofs of correctness and termination for the presented algorithms;
% (4) support for Java, Java bytecode,  and C programs; and
% (5) a broader experimental evaluation that demonstrates the cost-effectiveness of the approach.
% The implementation of DIG; and  all experimental data reported in this paper are available at \url{https://github.com/unsat/dig/}.
% % \matt{I see that we dropped pre/post discussion so I dropped it here.}
</p>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-research.html">research</a> <a href="./tag-blog.html">blog</a> <a href="./tag-writing.html">writing</a> <a href="./tag-invariant-generation.html">invariant-generation</a> <a href="./tag-dig.html">dig</a> <a href="./tag-dynamic-analysis.html">dynamic-analysis</a> <a href="./tag-nla.html">nla</a> <a href="./tag-nonlinear.html">nonlinear</a> </div>]]></description>
  <category><![CDATA[research]]></category>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[writing]]></category>
  <category><![CDATA[invariant-generation]]></category>
  <category><![CDATA[dig]]></category>
  <category><![CDATA[dynamic-analysis]]></category>
  <category><![CDATA[nla]]></category>
  <category><![CDATA[nonlinear]]></category>
  <link>./dig.html</link>
  <guid>./dig.html</guid>
  <pubDate>Mon, 01 Feb 2021 03:39:00 -0500</pubDate>
</item>
<item>
  <title><![CDATA[Useful Linux/Mac Setups]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#apt">1. APT</a></li>
<li><a href="#development">2. Development</a>
<ul>
<li><a href="#java">2.1. JAVA</a></li>
</ul>
</li>
<li><a href="#administration">3. Administration</a>
<ul>
<li><a href="#email">3.1. Email</a></li>
<li><a href="#raid">3.2. RAID</a></li>
<li><a href="#gpg">3.3. GPG</a></li>
</ul>
</li>
<li><a href="#remote-login">4. Remote Login</a>
<ul>
<li><a href="#ssh">4.1. SSH</a></li>
</ul>
</li>
<li><a href="#files">5. Files</a></li>
<li><a href="#misc">6. Misc</a>
<ul>
<li><a href="#benchmarks">6.1. Benchmarks</a></li>
<li><a href="#keyboard">6.2. Keyboard</a></li>
<li><a href="#multimedia">6.3. Multimedia</a></li>
<li><a href="#update-date-on-debian">6.4. Update <code>date</code> on Debian</a></li>
<li><a href="#users">6.5. Users</a></li>
</ul>
</li>
<li><a href="#web">7. Web</a>
<ul>
<li><a href="#website">7.1. Website</a></li>
<li><a href="#webserver">7.2. Webserver</a></li>
<li><a href="#table-of-contents-in-markdown">7.3. Table of Contents in Markdown</a></li>
</ul>
</li>
<li><a href="#mac-os">8. MAC OS</a></li>
<li><a href="#virtual-box">9. Virtual Box</a></li>
<li><a href="#emacs">10. Emacs</a>
<ul>
<li><a href="#useful-keys">10.1. Useful keys</a></li>
<li><a href="#tex">10.2. TeX</a></li>
<li><a href="#install-flyspell-on-mac">10.3. Install Flyspell on Mac</a></li>
<li><a href="#texlive">10.4. TexLive</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
Linux/Mac command lines and setup stuff that I find useful 
</p>

<div id="outline-container-apt" class="outline-2">
<h2 id="apt"><span class="section-number-2">1.</span> APT</h2>
<div class="outline-text-2" id="text-apt">
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">shows which package owns /path/to/file</span>
apt-file search /path/to/file
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">allows reinstalling a package without having to remove it first (and risk removing its dependencies)</span>
apt-get install --reinstall packagename
apt-file list packagename
apt-show-versions | grep unstable
apt-get build-dep packagename
</pre>
</div>
</div>
</div>

<div id="outline-container-development" class="outline-2">
<h2 id="development"><span class="section-number-2">2.</span> Development</h2>
<div class="outline-text-2" id="text-development">
</div>
<div id="outline-container-java" class="outline-3">
<h3 id="java"><span class="section-number-3">2.1.</span> JAVA</h3>
<div class="outline-text-3" id="text-java">
<ul class="org-ul">
<li>Install Sun/Oracle's JDK</li>
</ul>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">First add "contrib" to /etc/apt-sources.list</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">Then</span>
apt-get update &amp; apt-get install java-package
make-jpkg /path/to/jdk-*-linux-x64.tar.gz
dpkg -i oracle-java-*_amd64.deb
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-administration" class="outline-2">
<h2 id="administration"><span class="section-number-2">3.</span> Administration</h2>
<div class="outline-text-2" id="text-administration">
</div>
<div id="outline-container-email" class="outline-3">
<h3 id="email"><span class="section-number-3">3.1.</span> Email</h3>
<div class="outline-text-3" id="text-email">
<p>
We use <code>ssmtp</code> to send emails. The following uses <b>Gmail</b>'s server.
</p>

<ol class="org-ol">
<li><p>
After installing, edit the <code>/etc/ssmtp/ssmtp.conf</code> file
</p>

<pre class="example" id="orgb37d727">
root=username@gmail.com
mailhub=smtp.gmail.com:587
rewriteDomain=
hostname=fileserver.local
UseSTARTTLS=YES
AuthUser=username
AuthPass=password
FromLineOverride=YES
</pre></li>

<li><p>
Now edit <code>/etc/ssmtp/revaliases</code> to add accounts that we want to be
able to send mails. For example,
</p>

<div class="org-src-container">
<pre class="src src-shell">root:nguyenthanhvuh@gmail.com:smtp.gmail.com:587
auser:nguyenthanhvuh@gmail.com:smtp.gmail.com:587
</pre>
</div></li>

<li><p>
Finally, we can test sending mails
</p>

<div class="org-src-container">
<pre class="src src-shell">$ echo <span style="color: #98be65;">"test"</span> | mail -v -s <span style="color: #98be65;">"testing ssmtp setup"</span> tnguyen@cs.umd.edu
$ echo <span style="color: #98be65;">"Do this"</span> | mail -s <span style="color: #98be65;">"Todo"</span> nguyenthanhvuh@gmail.com
$ echo <span style="color: #98be65;">"A TEST"</span> &gt; afile
$ mail -s <span style="color: #98be65;">"Todo"</span> nguyenthanhvuh@gmail.com &lt; afile
</pre>
</div></li>
</ol>
</div>
</div>

<div id="outline-container-raid" class="outline-3">
<h3 id="raid"><span class="section-number-3">3.2.</span> RAID</h3>
<div class="outline-text-3" id="text-raid">
<p>
This is for RAID-5 setup, which requires a minimum of 3 drives. The
<b>usable space</b> is <code>(number of drives - 1) * size of smallest drive</code>.
Here we will use <code>mdm</code> to manage our RAID setup
(<code>apt-get install mdadm</code>).
</p>

<p>
To create new drive partitions in the RAID array, we can use <code>fdisk</code> or
<code>parted</code> (if the disk size &gt; 2 terabytes). If use <code>fdisk</code> then choose
the partition type to be raid (type <code>fd</code>). Now assume we want to use the
4 partitions <code>sdc1, sdc1, sde1</code>, and <code>sdf1</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">build the RAID array</span>
mdadm --create --verbose /dev/md0 --level=5 --raid-devices=4 /dev/sd[cdef]1

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">it will take some time to build the array, we can watch its status with</span>
watch cat /proc/mdstat

<span style="color: #5B6268;">#</span><span style="color: #5B6268;">once the array is built, we can check with</span>
mdadm --detail /dev/md0

/dev/md0:
Version : 1.2
Creation Time : Fri Jun 24 15:04:32 2016
Raid Level : raid5
Array Size : 734954496 (700.91 GiB 752.59 GB)
Used Dev Size : 244984832 (233.64 GiB 250.86 GB)
Raid Devices : 4
Total Devices : 4
Persistence : Superblock is persistent

Intent Bitmap : Internal

Update Time : Sat Jun 25 00:34:10 2016
State : clean
Active Devices : 4
Working Devices : 4
Failed Devices : 0
Spare Devices : 0

Layout : left-symmetric
Chunk Size : 512K

Name : GiaoChi:0
UUID : 1d431c63:a9fe7dca:ffb4dca5:58391d2e
Events : 1097

Number   Major   Minor   RaidDevice State
0     8     33    0    active sync   /dev/sdc1
1     8     49    1    active sync   /dev/sdd1
2     8     65    2    active sync   /dev/sde1
4     8     81    3    active sync   /dev/sdf1


<span style="color: #5B6268;"># </span><span style="color: #5B6268;">create file extension and mount</span>
mkfs.ext4 /dev/md0
mkdir /MYNEWSTORAGE
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">in /etc/fstab</span>
/dev/md0    /MYNEWSTORAGE      ext4    defaults    0    0
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">finally mount the array so that we can being to access /MYNEWSTORAGE</span>
mount -av

<span style="color: #5B6268;">#</span><span style="color: #5B6268;">edit configuration files so that mdm knows how to assemble the array when the system boots</span>
<span style="color: #c678dd;">echo</span> <span style="color: #98be65;">"DEVICE partitions"</span> &gt; /etc/mdadm/mdadm.conf
<span style="color: #c678dd;">echo</span> <span style="color: #98be65;">"HOMEHOST fileserver"</span> &gt;&gt; /etc/mdadm/mdadm.conf
<span style="color: #c678dd;">echo</span> <span style="color: #98be65;">"MAILADDR username@gmail.com"</span> &gt;&gt; /etc/mdadm/mdadm.conf
mdadm --detail --scan --verbose &gt;&gt; /etc/mdadm/mdadm.conf
</pre>
</div>
</div>
</div>

<div id="outline-container-gpg" class="outline-3">
<h3 id="gpg"><span class="section-number-3">3.3.</span> GPG</h3>
<div class="outline-text-3" id="text-gpg">
<div class="org-src-container">
<pre class="src src-shell">gpg --gen-key
gpg --export  -a <span style="color: #98be65;">"Name"</span> &gt; pub.key
gpg --export-secret-key -a <span style="color: #98be65;">"Name"</span> &gt; priv.key
gpg --import priv.key
gpg --list-keys
gpg --list-secret-keys
gpg --delete-key <span style="color: #98be65;">"Name"</span>
gpg --delete-secret-key <span style="color: #98be65;">"Name"</span>
gpg --edit-key <span style="color: #98be65;">"Name"</span>  <span style="color: #5B6268;">#</span><span style="color: #5B6268;">here you can change passphrase of priv key with passwd</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-remote-login" class="outline-2">
<h2 id="remote-login"><span class="section-number-2">4.</span> Remote Login</h2>
<div class="outline-text-2" id="text-remote-login">
</div>
<div id="outline-container-ssh" class="outline-3">
<h3 id="ssh"><span class="section-number-3">4.1.</span> SSH</h3>
<div class="outline-text-3" id="text-ssh">
<ol class="org-ol">
<li>Generate password-less SSH public key

<ol class="org-ol">
<li>From a terminal, type <code>ssh-keygen -t rsa</code> and hit <code>Enter</code> on most
questions, <b>even when it asks for password</b>, i.e., leave the
password blank. This allows to log in account from your machine
without requiring password.</li>
<li>The public key is stored at <code>~/.ssh/id_rsa.pub</code></li>
<li><b>Tips</b>:

<ul class="org-ul">
<li>Add you SSH public key to code repo (e.g., Github, Bitbucket).
This allows you to modify projects (e.g., push) without having
to enter username and password.</li>
<li>You can also use this key to ssh into other machine without
having to enter password (see <b>password-less login</b> below)</li>
</ul></li>
</ol></li>

<li><p>
Password-less login
</p>

<p>
To ssh login the server <code>host</code> without having to enter a password:
</p>

<div class="org-src-container">
<pre class="src src-shell">$ cat ~/.ssh/id_rsa.pub | ssh username@host <span style="color: #98be65;">'cat &gt;&gt; ~/.ssh/authorized_keys'</span>
</pre>
</div></li>

<li>Miscs:

<ul class="org-ul">
<li>SSH session disconnected and got stuck: type <code>Enter ~ .</code></li>
</ul></li>

<li><p>
Mmulti-hop ssh e.g., ssh to <code>user1@host1:port1</code> and then ssh to
<code>user2@host2:port2</code> (as <code>user1@host1</code>:).
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">This method uses ProxyJump</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">add the following entry to file ~/.ssh/config</span>
Host AName
Hostname host1
Port port1
User user1
ProxyJump user2@host2:port2

$ ssh user2@AName
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">first password asked is for user1@host1, second password asked is for user2@host2.</span>


<span style="color: #5B6268;"># </span><span style="color: #5B6268;">This second method uses netcat (the nc command) and ProxyCommand</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">add the following entry to file ~/.ssh/config</span>
Host AName
Hostname host1
ProxyCommand ssh -q user1@host1 -p port1 nc host2 port2
StrictHostKeyChecking no
<span style="color: #dcaeea;">UserKnownHostsFile</span>=/dev/null

$ ssh user2@AName
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">first password asked is for user1@host1, second password asked is for user2@host2</span>
</pre>
</div></li>

<li>using <code>scp</code></li>
</ol>

<div class="org-src-container">
<pre class="src src-shell">scp -P port_number username@host:/path/to/file /destination/dir
</pre>
</div>

<ul class="org-ul">
<li><p>
using <code>rsync</code> resume file transfer
</p>

<div class="org-src-container">
<pre class="src src-shell">rsync --partial --progress --rsh=ssh user@host:/path/to/file .
</pre>
</div></li>

<li>using <code>sshfs</code> to mount remote directories &gt; source:
<a href="https://linuxize.com/post/how-to-use-sshfs-to-mount-remote-directories-over-ssh/">https://linuxize.com/post/how-to-use-sshfs-to-mount-remote-directories-over-ssh/</a>

<ol class="org-ol">
<li>Install <code>SSHFS</code>

<ul class="org-ul">
<li><p>
For Debian
</p>

<div class="org-src-container">
<pre class="src src-shell">$ sudo apt install sshf
</pre>
</div></li>

<li><p>
For Mac
</p>

<div class="org-src-container">
<pre class="src src-shell">$ brew cask install osxfuse
$ brew install sshfs
</pre>
</div></li>
</ul></li>

<li>Mount remote directories (<b>tip</b>: use password-less SSH to avoid
entering password)
<code>shell       # sshfs [user@]host:[remote_directory] mountpoint [options]       # E.g.,       $ sshfs username@hostname:/home/dir1 /home/dir1/dir2       $ sshfs localhost:/home/tnguyen/Dropbox local2222/ -C -p 2222</code></li>
</ol></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-files" class="outline-2">
<h2 id="files"><span class="section-number-2">5.</span> Files</h2>
<div class="outline-text-2" id="text-files">
<ul class="org-ul">
<li><p>
move
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;">#</span><span style="color: #5B6268;">move with overwrite (and will not ask for confirmation)</span>
mv -f

<span style="color: #5B6268;">#</span><span style="color: #5B6268;">do *not* overwrite (and will not ask for confirmation)</span>
mv -n
</pre>
</div></li>

<li><p>
sync
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;">#</span><span style="color: #5B6268;">sync dirs</span>
<span style="color: #5B6268;">#</span><span style="color: #5B6268;">todir will become exactly like fromdir</span>
rsync -val --delete --exclude <span style="color: #98be65;">"*.ext"</span>  --exclude <span style="color: #98be65;">"dir"</span> fromdir todir

<span style="color: #5B6268;">#</span><span style="color: #5B6268;">syn website</span>
<span style="color: #5B6268;">#</span><span style="color: #5B6268;">I use the this command to synchronize my webpages to the university server</span>
rsync -azv --delete --exclude=.hg --exclude=.hgcheck -e ssh ~/www tnguyen@cse.unl.edu:/home/fac/tnguyen/public_html/
</pre>
</div></li>

<li><p>
recursively change directory whose permision is 777 to 755
</p>

<div class="org-src-container">
<pre class="src src-shell">find . -type d -perm 777 -print -exec chmod 755 {} <span style="color: #98be65;">\;</span>
</pre>
</div></li>

<li><p>
recursively delete files with extensions *.ext
</p>

<div class="org-src-container">
<pre class="src src-shell">find -name <span style="color: #98be65;">\*</span>.ext -delete
</pre>
</div></li>

<li><p>
change permission
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">change dir to 0755</span>
$ find /path -type d -print0 | xargs -0 chmod 0755

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">change file to 0644</span>
$ find /path -type f -print0 | xargs -0 chmod 0644
</pre>
</div></li>

<li><p>
Dropbox find conflicts
</p>

<div class="org-src-container">
<pre class="src src-shell">find ~/Dropbox/ -path <span style="color: #98be65;">"*(*'s conflicted copy [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]*"</span> -print
</pre>
</div></li>

<li><p>
grep
</p>

<div class="org-src-container">
<pre class="src src-shell">grep <span style="color: #98be65;">"error"</span> file.txt | grep -v <span style="color: #98be65;">"multiple output"</span> | grep -v <span style="color: #98be65;">"notexist"</span>
grep -A 10 -B 10 <span style="color: #98be65;">"hello world"</span> file.txt:  output surrounding lines
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-misc" class="outline-2">
<h2 id="misc"><span class="section-number-2">6.</span> Misc</h2>
<div class="outline-text-2" id="text-misc">
<ul class="org-ul">
<li><p>
Convert JPG's to pdf: use the <code>convert</code> command from <code>imagemagick</code>,
works with various types of files and not just <code>jpg's</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell">$ convert -auto-orient *.jpg notes.pdf
</pre>
</div></li>
</ul>
</div>

<div id="outline-container-benchmarks" class="outline-3">
<h3 id="benchmarks"><span class="section-number-3">6.1.</span> Benchmarks</h3>
<div class="outline-text-3" id="text-benchmarks">
<ul class="org-ul">
<li><p>
CPU
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #c678dd;">echo</span> <span style="color: #98be65;">'2^2^25'</span> | time -p bc &gt; /dev/null
time -p echo <span style="color: #98be65;">"scale=5000; a(1)*4"</span> | bc -l
sysbench --test=cpu --cpu-max-prime=20000 run <span style="color: #5B6268;">#</span><span style="color: #5B6268;">apt-get install sysbench</span>
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-keyboard" class="outline-3">
<h3 id="keyboard"><span class="section-number-3">6.2.</span> Keyboard</h3>
<div class="outline-text-3" id="text-keyboard">
<ul class="org-ul">
<li><p>
permanent switching <code>capslock</code> and <code>control</code> keys
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;">#</span><span style="color: #5B6268;">add/replace to /etc/default/keyboard</span>
<span style="color: #dcaeea;">XKBOPTIONS</span>=<span style="color: #98be65;">"ctrl:nocaps"</span> <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Some people prefer "ctrl:swapcaps"</span>
sudo dpkg-reconfigure -phigh console-setup
</pre>
</div></li>

<li><p>
Emacs key in XFCE
</p>

<div class="org-src-container">
<pre class="src src-shell">$ xfconf-query -c xsettings -p /Gtk/KeyThemeName -s Emacs
OR
Menu -&gt; Settings -&gt; Settings Editor -&gt; xsettings -&gt; Gtk -&gt; KeyThemeName,  enter Emacs<span style="color: #51afef;"> in</span> the field
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-multimedia" class="outline-3">
<h3 id="multimedia"><span class="section-number-3">6.3.</span> Multimedia</h3>
<div class="outline-text-3" id="text-multimedia">
<ul class="org-ul">
<li>Burn videos, e.g., mpg, to DVD
(<a href="http://www.lamolabs.org/blog/author/slmingol/">http://www.lamolabs.org/blog/author/slmingol/</a>)

<ul class="org-ul">
<li><p>
convert video with ffmpeg
</p>

<div class="org-src-container">
<pre class="src src-shell">ffmpeg -i input.m4v -target ntsc-dvd output.mpg
</pre>
</div></li>

<li><p>
do authoring
</p>

<div class="org-src-container">
<pre class="src src-shell">dvdauthor --title -o dvd -f output.mpg
dvdauthor -o dvd -T
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">NOTE: --title sets the title of the DVD, -T sets the table of contents. In both</span>
<span style="color: #5B6268;">#     </span><span style="color: #5B6268;">above commands the -o switch is referencing a directory, NOT the actual dvd.</span>
</pre>
</div></li>

<li><p>
roll the .mpg file into an ISO file
</p>

<div class="org-src-container">
<pre class="src src-shell">mkisofs -dvd-video -o dvdimage.iso dvd
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">NOTE: mkisofs is making an actual DVD video ISO file using the directory, dvd.</span>
</pre>
</div></li>

<li><p>
burn ISO to DVD
</p>

<div class="org-src-container">
<pre class="src src-shell">growisofs -speed=1 -dvd-compat -Z /dev/dvd=dvdimage.iso
NOTE: -speed=1 is for use with lower quality discs, increase as necessary
NOTE: This approach can be used to convert basically any format (m4v, mp4, etc.) to a DVD. Simply change the input file accordingly.
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-update-date-on-debian" class="outline-3">
<h3 id="update-date-on-debian"><span class="section-number-3">6.4.</span> Update <code>date</code> on Debian</h3>
<div class="outline-text-3" id="text-update-date-on-debian">
<ul class="org-ul">
<li>Note: <code>ntpdate</code> is deprecated, use <code>ntp</code> instead
<code>shell     sudo service ntp stop     sudo ntpd -gq     sudo service ntp start</code></li>

<li>The <code>-gq</code> tells the ntp daemon to correct the time regardless of the
offset (<code>g</code>) and exit immediately (<code>q</code>) after setting the time.</li>
</ul>
</div>
</div>

<div id="outline-container-users" class="outline-3">
<h3 id="users"><span class="section-number-3">6.5.</span> Users</h3>
<div class="outline-text-3" id="text-users">
<ul class="org-ul">
<li>Add user to sudo <code>shell sudo adduser username sudo</code></li>

<li>Change username from <i>olduser</i> to <i>newuser</i>.
<code>shell     # make sure olduser is not logged in or using any process, e.g., restart and log in as another user.     $ sudo usermod -l newuser olduser     $ sudo groupmod -n newuser olduser     $ sudo usermod -d /home/newuser -m newuser</code></li>

<li>Disable users
<code>shell     passwd -l username  to lock , passwd -u username to unlock</code></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-web" class="outline-2">
<h2 id="web"><span class="section-number-2">7.</span> Web</h2>
<div class="outline-text-2" id="text-web">
</div>
<div id="outline-container-website" class="outline-3">
<h3 id="website"><span class="section-number-3">7.1.</span> Website</h3>
<div class="outline-text-3" id="text-website">
<ul class="org-ul">
<li><p>
Password Protected Website
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">To protect a directory called 'SecDir' on your website,</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">go to SecDir and create/edit .htaccess file as follows:</span>
AuthName <span style="color: #98be65;">"MySecDir"</span>
AuthType Basic
AuthUserFile /path/to/.htpasswd
require valid-user

$ htpasswd -c /path/to/.htpasswd guestname <span style="color: #5B6268;">#</span><span style="color: #5B6268;">create a passwod</span>
$ chmod 644 /path/to/.htpasswd   <span style="color: #5B6268;">#</span><span style="color: #5B6268;">change permission</span>

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">to log in SecDir online, enter username: guestname and passwod: yourpass</span>
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-webserver" class="outline-3">
<h3 id="webserver"><span class="section-number-3">7.2.</span> Webserver</h3>
<div class="outline-text-3" id="text-webserver">
<ul class="org-ul">
<li><p>
Run a local server
</p>
<pre class="example">
$ cd /path/to/dir     
$ python -m SimpleHTTPServer #optional, can also enter the port e.g., 8080
</pre></li>
</ul>
</div>
</div>


<div id="outline-container-table-of-contents-in-markdown" class="outline-3">
<h3 id="table-of-contents-in-markdown"><span class="section-number-3">7.3.</span> Table of Contents in Markdown</h3>
<div class="outline-text-3" id="text-table-of-contents-in-markdown">
<ul class="org-ul">
<li>Use <code>gh-md-toc</code>, e.g.,  <code>$ gh-md-toc --insert cmds.md</code></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-mac-os" class="outline-2">
<h2 id="mac-os"><span class="section-number-2">8.</span> MAC OS</h2>
<div class="outline-text-2" id="text-mac-os">
<ul class="org-ul">
<li><p>
Creating an ISO from a CD/DVD e.g., to back up CD
</p>
<pre class="example">
- Insert CD
- open Disk Utils
- Select the CD (not the drive)
- Create File / New / Disk Image from ... / 
- Image Format:  CD/DVD Master  ...
- rename cdr to iso
</pre></li>
</ul>


<ul class="org-ul">
<li>Burn ISO image to USB (e.g., to install Linux distribution from USB)

<ul class="org-ul">
<li><p>
First convert ISO to dmg file
</p>
<pre class="example">
$ hdiutil convert -format UDRW -o ~/file.img ~/file.iso     
...
Speed: 427.5Mbytes/sec     Savings: 0.0%     created: ~/file.img.dmg
</pre></li>

<li><p>
Then find the USB device
</p>
<div class="org-src-container">
<pre class="src src-shell">$ diskutil list
/dev/disk0
<span style="color: #5B6268;">#</span><span style="color: #5B6268;">:             TYPE NAME          SIZE     IDENTIFIER</span>
0:    GUID_partition_scheme            *320.1 GB   disk0
1:            EFI             209.7 MB   disk0s1
2:          Apple_HFS Mac           319.7 GB   disk0s2
/dev/disk1
<span style="color: #5B6268;">#</span><span style="color: #5B6268;">:             TYPE NAME          SIZE     IDENTIFIER</span>
0:   FDisk_partition_scheme            *2.0 GB   disk1
1:       Windows_FAT_32             2.0 GB   disk1s1

$ diskutil unmountDisk /dev/disk1
Unmount of all volumes on disk1 was successful
</pre>
</div></li>

<li><p>
Finally, copy data to USB disk
</p>

<div class="org-src-container">
<pre class="src src-shell">$ sudo dd <span style="color: #dcaeea;">if</span>=/Users/tnguyen/file.img.dmg <span style="color: #dcaeea;">of</span>=/dev/disk1 <span style="color: #dcaeea;">bs</span>=1m
687+1 records<span style="color: #51afef;"> in</span>
687+1 records out
721127424 bytes transferred<span style="color: #51afef;"> in</span> 77.176835 secs (9343833 bytes/sec)

$ diskutil eject /dev/disk1
Disk /dev/disk1 ejected
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-virtual-box" class="outline-2">
<h2 id="virtual-box"><span class="section-number-2">9.</span> Virtual Box</h2>
<div class="outline-text-2" id="text-virtual-box">
<ul class="org-ul">
<li>SSH from Host OS to Virtualbox (VB) Guest OS using port forwarding.
For example, I run Linux (Debian) on my Mac and often ssh (from my
Mac) to that Linux run.

<ol class="org-ol">
<li>The following assumes the VB Guest is called <code>myserver</code>. Also make
sure the ssh server is installed on <code>myserver</code>.</li>

<li><p>
The Guest OS, by default, should have one interface already which
is using NAT. First go to the <code>Network</code> settings
<code>Advanced/Port Forwarding</code>, and then add a new rule:
</p>

<div class="org-src-container">
<pre class="src src-shell">Host port 2222, guest port 22, name ssh, other left blank
</pre>
</div>

<p>
or from command line
</p>

<div class="org-src-container">
<pre class="src src-shell">HostOS$ VBoxManage modifyvm myserver --natpf1 <span style="color: #98be65;">"ssh,tcp,,2222,,22"</span>
</pre>
</div></li>

<li><p>
To check the added rules:
</p>

<div class="org-src-container">
<pre class="src src-shell">HostOS$ VBoxManage showvminfo myserver | grep <span style="color: #98be65;">'Rule'</span>
NIC 1 Rule(0):   name = ssh, protocol = tcp, host ip = , host port = 2222, guest ip = ..., guest port = 22
</pre>
</div></li>

<li>Log in the Guest OS <code>HostOS$ ssh -p 2222 username@localhost</code> where
<code>username</code> is your user name in <code>myserver</code>.</li>
</ol></li>

<li>Others:

<ul class="org-ul">
<li><p>
Setup <i>password-less</i> login so that we don't have to enter the
password everytime.
</p>

<div class="org-src-container">
<pre class="src src-shell">HostOS$ cat ~/.ssh/id_rsa.pub | ssh username@localhost -p 2222 <span style="color: #98be65;">'cat &gt;&gt; ~/.ssh/authorized_keys'</span>
</pre>
</div></li>

<li><p>
Copy files from host to guest using scp, or vice versa
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;">#</span><span style="color: #5B6268;">copy from host to guest</span>
HostOS$ scp -P 2223 /path/to/file   fse16ae@localhost:/destination/dir

<span style="color: #5B6268;">#</span><span style="color: #5B6268;">copy from guest to host</span>
HostOS$ scp -P 2222 user@localhost:/path/to/file /destination/dir
</pre>
</div>

<p>
Note that to add another Guest OS, use the same technique but choose
different port number on the host OS, e.g., 2223.
</p></li>

<li><p>
Start Headless
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">List virtual machines</span>
HostOS$ VBoxManage list vms

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">Start VM in headless mode</span>
HostOS$ VBoxManage startvm Debian7 --type headless

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">Power off VM</span>
HostOS$ VBoxManage controlvm Debian7 poweroff
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-emacs" class="outline-2">
<h2 id="emacs"><span class="section-number-2">10.</span> Emacs</h2>
<div class="outline-text-2" id="text-emacs">
</div>

<div id="outline-container-useful-keys" class="outline-3">
<h3 id="useful-keys"><span class="section-number-3">10.1.</span> Useful keys</h3>
<div class="outline-text-3" id="text-useful-keys">
<pre class="example" id="org38738e3">
M-x load-file
C-x k : kill buffer
C-x C-x:  start a a location l,  search for something to go to new location,  then press C-x C-x to return back to l
M-x occur:  search all line with matched regexp
C-x C-r : read only
C-x C-v:  reload file (not technically but it works well)
C-c {  in latex mode to create {}
C-j  insert paragraph break
C-c C-s:  insert section subsection paragraph and label
C-c C-e: insert environment (e.g. figure, equation, list etc)
C-c C-f C-e:  emphasize
C-c %   or  ;  :  comment out the paragraph or line
C-c C-r:  on a highlighted region to latex only that region
C-c C-c:  to run latex.
C-c `:  keep on pressing this to review  errors after running latex
C-/:  undo
C-x k: kill buffer
M-/: autocomplete
M-h : mark entire paragraph
C-x h: mark entire buffer
C-t: transpose 2 letters  , e.g.  letet C-t  =&gt; lette
M-t: transpose 2 words,  e.g.,  world hello  M-t  -&gt;  hello word  ;   vu, nguyen M-t  =&gt; nguyen, vu  (note: cursor btw the 2 words,  Alt-b to move back a word)
C-x C-t: transpose 2 lines
M-u : uppercase letters
M-c : capitalize letters
C-s C-w:  to the end of the word (handy)
Search and replace
C-s twice to redo the last  search
C-s C-w  search the word under the cursor

;; Windows resize
C-x + : make windows same height/width
C-x - : shrink window to fit content

M-x package-refresh-contents:  to refresh melpa content

;; Tramp: open remote files via ssh
open /ssh:user@host#port:/path

;; Tab
untabify / tabify to convert from tab to space and space to tab.
</pre>
</div>
</div>

<div id="outline-container-tex" class="outline-3">
<h3 id="tex"><span class="section-number-3">10.2.</span> TeX</h3>
<div class="outline-text-3" id="text-tex">
<pre class="example" id="org0ae0427">
M-x align-current: To align columns in LaTeX table, highlight the table region, then M-x align-current
</pre>
</div>
</div>

<div id="outline-container-install-flyspell-on-mac" class="outline-3">
<h3 id="install-flyspell-on-mac"><span class="section-number-3">10.3.</span> Install Flyspell on Mac</h3>
<div class="outline-text-3" id="text-install-flyspell-on-mac">
<ul class="org-ul">
<li>Install <code>cocoAspell</code> (which provides aspell)</li>
<li>Install the appropriate <i>dictionary</i>
(<code>./configure; make; make install</code>)</li>
</ul>
</div>
</div>

<div id="outline-container-texlive" class="outline-3">
<h3 id="texlive"><span class="section-number-3">10.4.</span> TexLive</h3>
<div class="outline-text-3" id="text-texlive">
<div class="org-src-container">
<pre class="src src-shell">$ tlmgr update --self
$ tlmgr update --all <span style="color: #5B6268;"># </span><span style="color: #5B6268;">update TexLive packages installation (Mac)</span>
$ tlmgr update --list  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">see what will be upgraded</span>
</pre>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="./tags.html">Tags</a>: <a href="./tag-computer.html">computer</a> <a href="./tag-setup.html">setup</a> <a href="./tag-blog.html">blog</a> <a href="./tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[computer]]></category>
  <category><![CDATA[setup]]></category>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[linux]]></category>
  <link>./useful_cmds.html</link>
  <guid>./useful_cmds.html</guid>
  <pubDate>Fri, 01 Jan 2021 03:39:00 -0500</pubDate>
</item>
</channel>
</rss>
