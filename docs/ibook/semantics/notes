# \begin{frame}[fragile]{WP for Loop}
#   \begin{center}
#   wp(while b do S) = \alert{$I \wedge b \Rightarrow \text{wp}(S,I) ~\wedge~ I \wedge \neg b \Rightarrow Q$}
#   \end{center}
  
#     Find/Guess a loop invariant $I$: 
#     \begin{itemize}
#     - $P \Rightarrow I$: initially I is true wrt P (base case)
#     - $I \wedge b  \Rightarrow I$: I is preserved after each execution (inductive case)
#     - \alert{$I \wedge \neg B \Rightarrow Q$}: if the loop terminates, the post condition holds (Partial correctness)
#     \end{itemize}

#       \begin{columns}[T]
#       \begin{column}{0.3\textwidth}
#   \begin{lstlisting}
#     $\{N \ge 0\}$
#     i := 0;
#     while (i $<$ N)
#         i := N;
#     $\{i \equiv N\}$
#   \end{lstlisting}
#   \end{column}
#       \begin{column}{0.7\textwidth}
#         \begin{itemize}
#           - Which ones would be good invariant to find the wp?
#             \begin{enumerate}
#             - N $\ge$ 0  %no
#             - i $\le$ N %yes
#             \end{enumerate}
#             \pause
#         - Find the wp for the loop
#         - Prove the program is correct (show that $P \Rightarrow \text{wp}$) 
#       \end{itemize}
#       \end{column}
#       \end{columns}

%% \begin{frame}[fragile]{In-Class Exercise}
%% 
    


# \begin{frame}[fragile]{Loops}
#   \begin{itemize}
#   - wp(while b do S) = ??
#   - Idea: use \alert{loop invariant}
#     \begin{itemize}
#     - holds when the loop is entered
#     - preserves after the loop body is executed
#     \end{itemize}
#   \end{itemize}



#   \pause
#   \begin{exampleblock}{Example}
#   \begin{lstlisting}
#     $\{N \ge 0\}$
#     i := 0;
#     while (i $<$ N)
#         i := N;
#   \end{lstlisting}
  
#   Which ones are loop invariants? For those that are not, explain why
#   \begin{enumerate}
#   - i $\equiv$ 0 %no
#   - i $\equiv$ N %no 
#   - N $\ge$ 0  %yes
#   - i $\le$ N %yes
#   \end{enumerate}
#   \end{exampleblock}


Consider the loop `while b do S`, the loop invariant can be placed at the follow locations:
```C
{I} //1 
while b do 
    {I} //2
    S
    {I} //3
```
